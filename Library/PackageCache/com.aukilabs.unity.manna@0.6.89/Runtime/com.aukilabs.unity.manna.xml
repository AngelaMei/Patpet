<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>com.aukilabs.unity.manna</name>
    </assembly>
    <members>
        <member name="T:Auki.ConjureKit.Manna.CoordinateEnvironment">
            <summary>
            Holds transformation matrices and converts points, directions and poses from one coordinate system to another.
            </summary>
        </member>
        <member name="P:Auki.ConjureKit.Manna.CoordinateEnvironment.textureToProjectedCoordinatesMatrix">
            <summary>
            Texture to projected coordinates matrix. See Manna.ProcessVideoFrameTexture documentation for more details.
            </summary>
        </member>
        <member name="P:Auki.ConjureKit.Manna.CoordinateEnvironment.projectionMatrix">
            <summary>
            Projection matrix, aka arCamera.projectionMatrix.
            </summary>
        </member>
        <member name="P:Auki.ConjureKit.Manna.CoordinateEnvironment.worldToCameraMatrix">
            <summary>
            World-to-camera matrix, aka arCamera.worldToCameraMatrix.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.CoordinateEnvironment.#ctor(UnityEngine.Matrix4x4,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4)">
            <summary>
            Constructor.
            </summary>
            <param name="textureToProjectedCoordinatesMatrix">Texture to projected coordinates matrix</param>
            <param name="projectionMatrix">Projection matrix</param>
            <param name="worldToCameraMatrix">World to camera matrix</param>
            <param name="screenToNDCMatrix">Screen to NDC matrix</param>
            <param name="sessionOriginToWorldMatrix">Session origin to world matrix</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.CoordinateEnvironment.#ctor(UnityEngine.Texture,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4)">
            <summary>
            Constructor.
            </summary>
            <param name="texture">Texture associated to the CoordinateEnvironment</param>
            <param name="projectionMatrix">Projection matrix</param>
            <param name="worldToCameraMatrix">World to camera matrix</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.CoordinateEnvironment.#ctor(UnityEngine.Matrix4x4,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4)">
            <summary>
            Constructor.
            </summary>
            <param name="textureToProjectedCoordinatesMatrix">Texture to projected coordinates matrix</param>
            <param name="projectionMatrix">Projection matrix</param>
            <param name="worldToCameraMatrix">World to camera matrix</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.CoordinateEnvironment.#ctor(UnityEngine.Texture,UnityEngine.Camera)">
            <summary>
            Constructor.
            </summary>
            <param name="texture">Input texture</param>
            <param name="camera">Camera</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.CoordinateEnvironment.#ctor(UnityEngine.Texture,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4)">
            <summary>
            Constructor.
            </summary>
            <param name="texture">Input texture</param>
            <param name="projectionMatrix">Projection matrix</param>
            <param name="worldToCameraMatrix">World to camera matrix</param>
            <param name="sessionOriginToWorldMatrix">Session origin to world matrix</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.CoordinateEnvironment.CameraSpaceToWorldSpace(UnityEngine.Vector3,System.Single)">
            <summary>
            Converts coordinates from camera space to world space.
            </summary>
            <param name="inCamera">Coordinates in camera space</param>
            <param name="w">(Optional) Set to 1.0f for points (default value) or 0.0f for directions</param>
            <returns>Coordinates in world space</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.CoordinateEnvironment.WorldSpaceToTextureSpace(UnityEngine.Vector3)">
            <summary>
            Converts coordinates from world space to texture space.
            </summary>
            <param name="inWorld">Coordinates in world space</param>
            <returns>Coordinates in texture space</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.CoordinateEnvironment.TextureSpaceToCameraSpace(UnityEngine.Vector2,System.Single)">
            <summary>
            Converts coordinates from texture space to camera space.
            </summary>
            <param name="inTexture">Coordinates of point in texture space</param>
            <param name="z">Distance from point to camera</param>
            <returns>Coordinates of point in camera space</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.CoordinateEnvironment.CameraSpaceToScreenSpace(UnityEngine.Vector3)">
            <summary>
            Converts coordinates from camera space to screen space.
            </summary>
            <param name="inCamera">Coordinates of point in camera space</param>
            <returns>Coordinates of point in screen space</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.CoordinateEnvironment.CameraSpaceToTextureSpace(UnityEngine.Vector3)">
            <summary>
            Converts coordinates from camera space to texture space.
            </summary>
            <param name="inCamera">Coordinates in camera space</param>
            <returns>Coordinates in texture space</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.CoordinateEnvironment.TextureSpaceToScreenSpace(UnityEngine.Vector2)">
            <summary>
            Converts coordinates from texture space to screen space.
            </summary>
            <param name="inTexture">Coordinates in texture space</param>
            <returns>Coordinates in screen space</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.CoordinateEnvironment.WorldSpaceToSessionOriginSpace(UnityEngine.Vector3,System.Single)">
            <summary>
            Converts coordinates from world space to session origin space.
            </summary>
            <param name="inWorld">Coordinates in world space</param>
            <param name="w">(Optional) Set to 1.0f for points (default value) or 0.0f for directions</param>
            <returns>Coordinates in session origin space</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.CoordinateEnvironment.SessionOriginSpaceToWorldSpace(UnityEngine.Vector3,System.Single)">
            <summary>
            Converts coordinates from session origin space to world space.
            </summary>
            <param name="inSessionOrigin">Coordinates in session origin space</param>
            <param name="w">(Optional) Set to 1.0f for points (default value) or 0.0f for directions</param>
            <returns>Coordinates in world space</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.CoordinateEnvironment.CameraSpaceToSessionOriginSpace(UnityEngine.Vector3,System.Single)">
            <summary>
            Converts coordinates from camera space to session origin space.
            </summary>
            <param name="inCamera">Coordinates in camera space</param>
            <param name="w">(Optional) Set to 1.0f for points (default value) or 0.0f for directions</param>
            <returns>Coordinates in session origin space</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.CoordinateEnvironment.CameraSpaceToWorldSpace(UnityEngine.Pose)">
            <summary>
            Converts a pose from camera space to world space.
            </summary>
            <param name="inCamera">Pose in camera space</param>
            <returns>Pose in world space</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.CoordinateEnvironment.WorldSpaceToSessionOriginSpace(UnityEngine.Pose)">
            <summary>
            Converts a pose from world space to session origin space.
            </summary>
            <param name="inWorld">Pose in world space</param>
            <returns>Pose in session origin space</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.CoordinateEnvironment.SessionOriginSpaceToWorldSpace(UnityEngine.Pose)">
            <summary>
            Converts a pose from session origin space to world space.
            </summary>
            <param name="inSessionOrigin">Pose in session origin space</param>
            <returns>Pose in world space</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.CoordinateEnvironment.CameraSpaceToSessionOriginSpace(UnityEngine.Pose)">
            <summary>
            Converts a pose from camera space to session origin space.
            </summary>
            <param name="inCamera">Pose in camera space</param>
            <returns>Pose in session origin space</returns>
        </member>
        <member name="T:Auki.ConjureKit.Manna.DebugStorage.EstimatedPoseData">
            <summary>
            Represents a screenshot of estimated pose data at a specific timestamp.
            It includes:
            - timestamp
            - the matrices at that timestamp
            - corners of the points associated with pose
            - the pose extracted from such corners
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.DebugStorage.EstimatedPoseData.Timestamp">
            <summary>
            Gets the timestamp associated with the estimated pose data.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.DebugStorage.EstimatedPoseData.Corners">
            <summary>
            Gets an array of corner points associated with the pose data.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.DebugStorage.EstimatedPoseData.DetectedPose">
            <summary>
            Gets the detected pose information.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.DebugStorage.EstimatedPoseData.TextureToProjectedCoordinatesMatrix">
            <summary>
            Gets the transformation matrix from texture coordinates to projected coordinates.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.DebugStorage.EstimatedPoseData.ProjectionMatrix">
            <summary>
            Gets the projection matrix.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.DebugStorage.EstimatedPoseData.WorldToCameraMatrix">
            <summary>
            Gets the transformation matrix from world coordinates to camera coordinates.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.DebugStorage.EstimatedPoseData.PhysicalSize">
            <summary>
            Gets the physical size associated with the estimated pose data.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.DebugStorage.EstimatedPoseData.Payload">
            <summary>
            Gets the payload string associated with the estimated pose data.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DebugStorage.EstimatedPoseData.#ctor(System.Int64,System.String,UnityEngine.Vector2[],UnityEngine.Pose,System.Single,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.ConjureKit.Manna.DebugStorage.EstimatedPoseData" /> struct with the provided data.
            </summary>
            <param name="timestamp">The timestamp associated with the estimated pose data.</param>
            <param name="payload">The payload string associated with the estimated pose data.</param>
            <param name="corners">An array of corner points from which the pose is obtained.</param>
            <param name="detectedPose">The detected pose information.</param>
            <param name="physicalSize">The known physical size.</param>
            <param name="textureToProjectedCoordinatesMatrix">The transformation matrix from texture coordinates to projected coordinates.</param>
            <param name="projectionMatrix">The projection matrix.</param>
            <param name="worldToCameraMatrix">The transformation matrix from world coordinates to camera coordinates.</param>
        </member>
        <member name="T:Auki.ConjureKit.Manna.DebugStorage.DebugFrameData">
            <summary>
            Represents frame data for debug purposes, which include:
            - a frame texture
            - timestamp of capture
            - all matrices associated with it at the time of capture
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.DebugStorage.DebugFrameData.FrameTexture">
            <summary>
            Gets the frame texture.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.DebugStorage.DebugFrameData.TimestampInMs">
            <summary>
            Gets the timestamp in milliseconds.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.DebugStorage.DebugFrameData.Framestamp">
            <summary>
            Gets the framestamp.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.DebugStorage.DebugFrameData.TextureToProjectedCoordinatesMatrix">
            <summary>
            Gets the texture-to-projected-coordinates matrix.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.DebugStorage.DebugFrameData.ProjectionMatrix">
            <summary>
            Gets the projection matrix.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.DebugStorage.DebugFrameData.WorldToCameraMatrix">
            <summary>
            Gets the world-to-camera matrix.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DebugStorage.DebugFrameData.#ctor(UnityEngine.Texture,System.Int64,System.Int64,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.ConjureKit.Manna.DebugStorage.DebugFrameData" /> class.
            </summary>
            <param name="frameTexture">The frame texture.</param>
            <param name="timestampInMs">The timestamp in milliseconds.</param>
            <param name="framestamp">The framestamp.</param>
            <param name="textureToProjectedCoordinatesMatrix">The texture-to-projected-coordinates matrix.</param>
            <param name="projectionMatrix">The projection matrix.</param>
            <param name="worldToCameraMatrix">The world-to-camera matrix.</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DebugStorage.DebugFrameData.ReleaseTexture">
            <summary>
            Releases the frame texture.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DebugStorage.DebugFrameData.JsonEncodedMatrices">
            <summary>
            Gets the JSON-encoded matrices.
            </summary>
            <returns>JSON-encoded matrices as a string.</returns>
        </member>
        <member name="T:Auki.ConjureKit.Manna.DebugStorage.DebugFrameCalibrationData">
            <summary>
            Represents debug frame calibration data, including detected corners.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.DebugStorage.DebugFrameCalibrationData.DetectedCorners">
            <summary>
            Gets the detected corners in the frame.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DebugStorage.DebugFrameCalibrationData.#ctor(UnityEngine.Texture,System.Int64,System.Int64,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4,UnityEngine.Vector2[])">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.ConjureKit.Manna.DebugStorage.DebugFrameCalibrationData" /> class.
            </summary>
            <param name="frameTexture">The frame texture.</param>
            <param name="timestampInMs">The timestamp in milliseconds.</param>
            <param name="framestamp">The framestamp.</param>
            <param name="textureToProjectedCoordinatesMatrix">The texture-to-projected-coordinates matrix.</param>
            <param name="projectionMatrix">The projection matrix.</param>
            <param name="worldToCameraMatrix">The world-to-camera matrix.</param>
            <param name="detectedCorners">The detected corners.</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DebugStorage.DebugFrameCalibrationData.#ctor(Auki.ConjureKit.Manna.DebugStorage.DebugFrameCalibrationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.ConjureKit.Manna.DebugStorage.DebugFrameCalibrationData" /> class as a copy of another instance.
            </summary>
            <param name="other">The other <see cref="T:Auki.ConjureKit.Manna.DebugStorage.DebugFrameCalibrationData" /> instance to copy.</param>
        </member>
        <member name="T:Auki.ConjureKit.Manna.DebugStorage.DebugFrameStorage">
            <summary>
            A utility class for managing and storing debug frame data, including calibration data and video feed frames.
            </summary>
        </member>
        <member name="P:Auki.ConjureKit.Manna.DebugStorage.DebugFrameStorage.ShouldStoreCalibrationFrame">
            <summary>
            Gets or sets a value indicating whether calibration frames should be stored.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.DebugStorage.DebugFrameStorage.LastCalibration">
            <summary>
            Gets the last stored calibration frame data.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.DebugStorage.DebugFrameStorage.VideoFeed">
            <summary>
            Gets the video feed frame data.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DebugStorage.DebugFrameStorage.StoreCalibrationData(UnityEngine.Texture,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4,UnityEngine.Vector2[],System.Int64,System.UInt32)">
            <summary>
            Stores calibration data.
            </summary>
            <param name="texture">The frame texture.</param>
            <param name="textureToProjectedCoordinatesMatrix">The texture-to-projected-coordinates matrix.</param>
            <param name="projectionMatrix">The projection matrix.</param>
            <param name="worldToCameraMatrix">The world-to-camera matrix.</param>
            <param name="detectedCorners">The detected corners in the frame.</param>
            <param name="timestamp">The timestamp in milliseconds.</param>
            <param name="framestamp">The framestamp.</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DebugStorage.DebugFrameStorage.StoreEstimatedPoseData(System.Int64,System.String,UnityEngine.Vector2[],UnityEngine.Pose,System.Single,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4)">
            <summary>
            Stores estimated pose data.
            </summary>
            <param name="timestamp">The timestamp in milliseconds.</param>
            <param name="payload">The data payload.</param>
            <param name="corners">The detected corners in the frame.</param>
            <param name="detectedPose">The detected pose.</param>
            <param name="physicalSize">The physical size.</param>
            <param name="textureToProjectedCoordinatesMatrix">The texture-to-projected-coordinates matrix.</param>
            <param name="projectionMatrix">The projection matrix.</param>
            <param name="worldToCameraMatrix">The world-to-camera matrix.</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DebugStorage.DebugFrameStorage.SetShouldStoreCalibrationFrame(System.Boolean)">
            <summary>
            Sets whether calibration frames should be stored or not.
            </summary>
            <param name="value">A value indicating whether calibration frames should be stored.</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DebugStorage.DebugFrameStorage.StoreVideoFrameTexture(UnityEngine.Texture,System.Int64,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4)">
            <summary>
            Stores the video frame texture.
            </summary>
            <param name="texture">The frame texture.</param>
            <param name="textureToProjectedCoordinatesMatrix">The texture-to-projected-coordinates matrix.</param>
            <param name="projectionMatrix">The projection matrix.</param>
            <param name="worldToCameraMatrix">The world-to-camera matrix.</param>
            <param name="timestamp">The timestamp in milliseconds.</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DebugStorage.DebugFrameStorage.GetCornersForTimestamp(System.Int64)">
            <summary>
            Gets the detected corners for a specific timestamp.
            </summary>
            <param name="timestamp">The timestamp in milliseconds.</param>
            <returns>An array of detected corners.</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DebugStorage.DebugFrameStorage.SetTicketForTimestamp(System.UInt32,System.Int64)">
            <summary>
            Sets a ticket for a specific timestamp.
            </summary>
            <param name="ticketNumber">The ticket number.</param>
            <param name="timestamp">The timestamp in milliseconds.</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DebugStorage.DebugFrameStorage.CalibratingFromTicket(System.UInt32)">
            <summary>
            Initiates calibration from a ticket number.
            </summary>
            <param name="ticketNumber">The ticket number.</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DebugStorage.DebugFrameStorage.CalibratingFromTimestamp(System.Int64)">
            <summary>
            Initiates calibration from a specific timestamp.
            </summary>
            <param name="timestamp">The timestamp in milliseconds.</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DebugStorage.DebugFrameStorage.WillCalibrateFromLighthouseAtTimestamp(System.Int64,System.String)">
            <summary>
            Indicates that calibration will be performed from a lighthouse at a specific timestamp.
            </summary>
            <param name="timestamp">The timestamp in milliseconds.</param>
            <param name="lighthouseId">The lighthouse identifier.</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DebugStorage.DebugFrameStorage.TryGetPoseDataForLighthouseId(System.String,Auki.ConjureKit.Manna.DebugStorage.EstimatedPoseData@)">
            <summary>
            Tries to get pose data for a specific lighthouse identifier.
            </summary>
            <param name="lighthouseId">The lighthouse identifier.</param>
            <param name="data">When this method returns, contains the estimated pose data if found; otherwise, it contains null.</param>
            <returns>True if pose data is available, false otherwise.</returns>
        </member>
        <member name="T:Auki.ConjureKit.Manna.DebugStorage.MetadataEncodingUtility">
            <summary>
            A utility class for encoding and decoding metadata inside a textures as pixels.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DebugStorage.MetadataEncodingUtility.EncodeMetadata(System.String,UnityEngine.Texture2D)">
            <summary>
            Encodes the provided metadata string into the target texture.
            </summary>
            <param name="metadata">The metadata string to encode.</param>
            <param name="targetTexture">The target Texture2D to store the metadata in.</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DebugStorage.MetadataEncodingUtility.DecodeMetadata(UnityEngine.Texture2D)">
            <summary>
            Decodes metadata from the provided source texture.
            </summary>
            <param name="sourceTexture">The source Texture2D containing encoded metadata.</param>
            <returns>The decoded metadata string.</returns>
        </member>
        <member name="T:Auki.ConjureKit.Manna.TextureCorner">
            <summary>
            Enumerates the corners of a texture in which the origin of coordinates is.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.TextureCorner.TopLeft">
            <summary>
            The top-left corner of the texture.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.TextureCorner.TopRight">
            <summary>
            The top-right corner of the texture.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.TextureCorner.BottomRight">
            <summary>
            The bottom-right corner of the texture.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.TextureCorner.BottomLeft">
            <summary>
            The bottom-left corner of the texture.
            </summary>
        </member>
        <member name="T:Auki.ConjureKit.Manna.DefaultTextureToNDCMatrices">
            <summary>
            Provides utility methods for calculating the texture-to-NDC (normalized coordinates) matrix in various screen orientations.
            This functionality is provided for each use case supported in Unity.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DefaultTextureToNDCMatrices.ARFoundationDefaultMatrix(System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.ScreenOrientation)">
            <summary>
            Computes a projectedToTextureCoordinatesMatrix that is suited for a texture
            created via the Manna ARFoundation code samples. See Manna.ProcessVideoFrameTexture
            for more details on creating a custom textureToProjectedCoordinatesMatrix.
            </summary>
            <param name="textureWidth">Pixel width of the texture (texture.width)</param>
            <param name="textureHeight">Pixel height of the texture (texture.height)</param>
            <param name="screenWidth">Pixel screen width, typically Screen.width</param>
            <param name="screenHeight">Pixel screen height, typically Screen.height</param>
            <param name="screenOrientation">The current potrait or landscape mode, typically Screen.orientation</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DefaultTextureToNDCMatrices.GenericMatrix(Auki.ConjureKit.Manna.TextureCorner,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.ScreenOrientation)">
            <summary>
            Generic option-based constructor for a textureToProjectedCoordinatesMatrix
            when the projected coordinates are NDC (Normalized Device Coordinates), as
            in most systems.
            Note that normalized device coordinates go from -1 to 1 left-to-right and
            bottom-to-top across the screen and that only the ratio screenWidth / screenHeight
            matters to the resulting matrix, and not the actual values of screenWidth and
            screenHeight.
            </summary>
            <param name="originOfTextureInPortraitMode">TextureCorner enum value</param>
            <param name="widthIsHorizontalInPortraitMode">Set this bool to true if the texture coordinate ranging from 0 to texture.width is a horizontal coordinate in portrait mode</param>
            <param name="insensitiveToLandscapeMode">Set this bool to true if the texture coordinate system does not change when the device passes from portrait mode to landscape mode (e.g., texture.width and texture.height do not switch)</param>
            <param name="textureWidth">Pixel width of the texture (texture.width)</param>
            <param name="textureHeight">Pixel height of the texture (texture.height)</param>
            <param name="screenWidth">Pixel screen width, typically Screen.width</param>
            <param name="screenHeight">Pixel screen height, typically Screen.height</param>
            <param name="screenOrientation">The current potrait or landscape mode, typically Screen.orientation</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DefaultTextureToNDCMatrices.AddCrop(UnityEngine.Matrix4x4,System.Int32,System.Int32)">
            <summary>
            Computes a textureToProjectedCoordinatesMatrix that converts cropped texture pixel coordinates to projected coordinates.
            </summary>
            <param name="textureToProjectedCoordinatesMatrix">Non-cropped texture to projected coordinates matrix</param>
            <param name="cropWindowMinX">X-index of first pixel inside the crop (i.e., 0 for no crop)</param>
            <param name="cropWindowMinY">Y-index of first pixel inside the crop (i.e., 0 for no crop)</param>
            <returns>A matrix that converts cropped pixel coordinates to projected coordinates</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DefaultTextureToNDCMatrices.ARFoundationDefaultMatrix(UnityEngine.Texture)">
            <summary>
            Computes a projectedToTextureCoordinatesMatrix that is suited for a texture
            created via the Manna ARFoundation code samples. See Manna.ProcessVideoFrameTexture
            for more details on creating a custom textureToProjectedCoordinatesMatrix.
            </summary>
            <param name="texture">Texture for which the matrix is to be constructed.</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.DefaultTextureToNDCMatrices.ScreenToNDCMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a screen to NDC transformation matrix.
            </summary>
            <param name="screenWidth">Width of screen in pixels</param>
            <param name="screenHeight">Height of screen in pixels</param>
        </member>
        <member name="T:Auki.ConjureKit.Manna.Lighthouse">
            <summary>
            Represents a Lighthouse - object recognized through computer vision that can be used to calculate a relative Pose.
            </summary>
        </member>
        <member name="T:Auki.ConjureKit.Manna.Lighthouse.LighthouseType">
            <summary>
            Lighthouse enumerated type.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.Lighthouse.LighthouseType.Static">
            <summary>
            Static Lighthouse type - bearing a fixed spatial relationship to its environment.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.Lighthouse.LighthouseType.Dynamic">
            <summary>
            Dynamic Lighthouse type - displayed on a handheld or a moving device screen.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.Lighthouse.Type">
            <summary>
            Lighthouse type.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.Lighthouse.StaticId">
            <summary>
            Static Lighthouse id.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.Lighthouse.SessionId">
            <summary>
            Session id (for dynamic Lighthouse%s).
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.Lighthouse.ParticipantId">
            <summary>
            Participant id (for dynamic Lighthouse%s).
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.Lighthouse.PhysicalSize">
            <summary>
            Physical size of the Lighthouse (in meters).
            </summary>
        </member>
        <member name="P:Auki.ConjureKit.Manna.Lighthouse.Texture">
            <summary>
            Texture containing the generated QR code for the Lighthouse.
            </summary>
        </member>
        <member name="P:Auki.ConjureKit.Manna.Lighthouse.Id">
            <summary>
            Gets Lighthouse id.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Lighthouse.#ctor(System.String,System.UInt32)">
            <summary>
            Constructor for dynamic Lighthouse%s.
            </summary>
            <param name="sessionId">Session id</param>
            <param name="participantId">Participant id</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Lighthouse.#ctor(System.String)">
            <summary>
            Constructor for static Lighthouse%s.
            </summary>
            <param name="staticLighthouseId">Id</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Lighthouse.Dispose">
            <summary>
            Frees up allocated resources.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Lighthouse.IsDifferent(Auki.ConjureKit.Manna.Lighthouse,System.String)">
            <summary>
            Use to compare a Lighthouse with a given content string.
            </summary>
            <param name="lighthouse">Lighthouse we want to compare</param>
            <param name="content">Content string we want to compare</param>
            <returns>`true` if different, `false` if equal</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Lighthouse.IsDifferent(Auki.ConjureKit.Manna.Lighthouse,System.String,System.UInt32)">
            <summary>
            Use to compare a Lighthouse with given Session and Participant ids.
            </summary>
            <param name="lighthouse">Lighthouse we want to compare</param>
            <param name="sessionId">Session id</param>
            <param name="participantId">Participant id</param>
            <returns>`true` if different, `false` if equal</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Lighthouse.IsQRCodeValid(System.String)">
            <summary>
            Checks if a given QR code is a valid Lighthouse.
            </summary>
            <param name="qrData">QR string that is going to be verified</param>
            <returns>`true` if valid, `false` if invalid</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Lighthouse.FromQRData(System.String,System.Single)">
            <summary>
            Creates a Lighthouse from a QR code string.
            </summary>
            <param name="qrData">QR code string</param>
            <param name="physicalSize">Physical size of Lighthouse (in meters)</param>
            <returns>A Lighthouse object created from given data</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Lighthouse.HasPoseData">
            <summary>
            Checks if this lighthouse has pose data associated with it.
            </summary>
            <returns>True if it has pose data.</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Lighthouse.Update">
            <summary>
            Manually refreshes the lighthouse state and texture.
            </summary>
        </member>
        <member name="T:Auki.ConjureKit.Manna.Manna">
             <summary>
             Functionalities of the Manna module are enabled by instantiating a `Manna`
             object while passing your instance of ConjureKit to the constructor. (E.g.,
             `_manna = new Manna(_conjureKit);`.)
            
             Use the `SetLighthouseVisible` method of the Manna class to hide and show 
             the calibrating QR code.
            
             The on-screen position and appearance of the QR code is not adjustable in 
             this release of the Manna module.
             </summary>
             <remarks>
             When a participant running an application with the same `app_key` scans a 
             code, that participant is automatically taken out of their current
             session and brought into the session of the participant displaying the code.
             This triggers ConjureKit's `.OnLeft` and `.OnJoined` callbacks, 
             respectively, for the joining participant. It also triggers the `.OnParticipantJoined`
             callback for the participant displaying the code (as well as for every participant 
             already in that session).
            
             By examining the pose of the displayed QR code relative to itself the joining device 
             also computes a 4x4 matrix `M` mapping its current world coordinates to the world
             coordinates of the new session. This matrix is applied to its ARSessionOrigin 
             transform, effectively changing the (physical) pose of the joining participant's 
             Unity scene origin to match the (physical) pose of the scene origin in the session 
             being joined. Note that any visible assets will change (physical) position alongside 
             the Unity scene origin during this step unless corrective action is taken.
            
             Visible assets can be kept in place during the coordinate change by setting Manna's 
             `.OnCalibrationSuccess` callback. This callback takes the before-mentioned matrix `M` 
             as argument. One should left-multiply the transforms of any first-level game objects 
             that belong to the old coordinate system to keep them in physical place. The Manna 
             class provides a convenience static method for this, `LeftMultiplyTransformByMatrix`. 
             E.g.:
             ```
             using Auki.ConjureKit;
             using Auki.ConjureKit.Manna;
             
             public class Main : MonoBehaviour
             {
                 _gameObject1 = ...;
                 _gameObject2 = ...;
                 _conjureKit = new ConjureKit(app_key, app_secret);
                 _manna = new Manna(_conjureKit);
                 _manna.OnCalibrationSuccess += (matrix) =&gt;
                 {
                     Manna.LeftMultiplyTransformByMatrix(_gameObject1.transform, matrix);
                     Manna.LeftMultiplyTransformByMatrix(_gameObject2.transform, matrix);
                 }
             } 
             ```
             `LeftMultiplyTransformByMatrix` is overloaded to directly accept `GameObject`s 
             for its first argument, as well.
            
             Note that in the above example, any possible children of `_gameObject1` or
             `_gameObject2` need not have their transforms left-multiplied by `matrix` since the 
             transform has already been applied at the parent level. (Indeed, applications may wish 
             to group all of their visible assets inside of a single subtree of the scene, such
             as to apply `Manna.LeftMultiplyTransformByMatrix(..., matrix);` only once, at the
             root of that subtree. See also the next note, however.)
            
             Note that there is a window of time between when ConjureKit's `OnJoined()` 
             callback occurs and Manna's `.OnCalibrationSuccess()` callback occurs. If any game objects
             whose pose is given relative to the new coordinate system are added to the joining 
             participant's scene during this time (with, namely, the pose being communicated to the 
             joining participant by other participants already in the session), then those game objects 
             should be kept invisible until the `.OnCalibrationSuccess()` callback occurs, signaling 
             a state of correct calibration. Moreover those game objects should not be subject to
             left-multiplication (since their pose is already given with respect to the new coordinate
             system). Children of ARSessionOrigin should not be left-multiplied, either.
             </remarks>
        </member>
        <member name="P:Auki.ConjureKit.Manna.Manna.VibrateOnReportPose">
            <summary>
            Cause the device offering calibration to vibrate when it receives a
            request from a device trying to calibrate. This vibration will occur before 
            the device trying to calibrate sets its state to Calibrated, but after that 
            other's 'VibrateOnReadPose' haptic feedback, if that flag is set.
            </summary>
        </member>
        <member name="P:Auki.ConjureKit.Manna.Manna.VibrateOnReadPose">
            <summary>
            Cause a device to vibrate whenever it scans a lighthouse (QR code) at sufficiently 
            close range. This vibration will occur before the device succeeds in joining
            an associated session, and before the 'VibrateOnReportPose' haptic feedback of
            the device offering calibration, if any, if that flag is set.
            </summary>
        </member>
        <member name="P:Auki.ConjureKit.Manna.Manna.VibrateOnCalibrate">
            <summary>
            Cause the device to vibrate each time its successfully recalibrates from 
            scanning a lighthouse in its environment; this haptic feedback will occur after the 
            haptic feedback from 'VibrateOnReadPose', if the former flag is set.
            </summary>
        </member>
        <member name="P:Auki.ConjureKit.Manna.Manna.OnLighthouseTracked">
            <summary>
            Called when a lighthouse is being tracked even if its not close enough
            the boolean passed indicates weather its deemed to be close enough or not.
            </summary>
        </member>
        <member name="P:Auki.ConjureKit.Manna.Manna.OnCalibrationSuccess">
            <summary>
            This callback is called at the same frame that the pose of the ARSessionOrigin
            is adjusted to accommodate for joining a pre-existing session via QR code 
            calibration. See the detailed usage notes above in the Manna class overview.
            </summary>
            <returns>Unity Matrix4x4 specifying the change of coordinates from old to new 
            world coordinates</returns>
        </member>
        <member name="P:Auki.ConjureKit.Manna.Manna.OnCalibrationFailed">
            <summary>
            Called if calibration fails.
            </summary>
            <returns>CalibrationFailureData containing Lighthouse, its pose and a failure reason</returns>&gt;
        </member>
        <member name="P:Auki.ConjureKit.Manna.Manna.OnSetImageTracker">
            <summary>
            Called when image tracker is changed.
            Will return `true` if Manna is using the ARFoundation image tracker or `false` if it's using the native one.
            Deprecated: this event is no longer triggered/used.
            </summary>
        </member>
        <member name="P:Auki.ConjureKit.Manna.Manna.CalibrationCooldownMs">
            <summary>
            Minimum cooldown time in milliseconds between calibrations.
            This prevents calibrations from being performed too close in time from each other.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Manna.#ctor(Auki.ConjureKit.IConjureKit,System.Single)">
            <summary>
            Constructor - initializes and registers Manna as a ConjureKit module.
            </summary>
            <param name="conjureKit">ConjureKit instance</param>
            <param name="distanceToSizeRatio">(internal) optional max calibration distance to QR code size ratio</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Manna.ProcessVideoFrameTexture(UnityEngine.Texture,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4)">
            <summary>
            Pass a video frame to Manna so that Manna can scan it for QrCodes. (See
            code samples.) See the overloaded version of this function for finer-grained
            control on the coordinate transform pipeline. In this version of the function,
            `textureToProjectedCoordinatesMatrix` defaults to the matrix computed by
            `DefaultTextureToNDCMatrices.ARFoundationCameraBackgroundDefaultMatrix()`.
            </summary>
            <param name="texture">The texture.</param>
            <param name="projectionMatrix">The coordinate transform from camera space to normalized device coordinates.</param>
            <param name="worldToCameraMatrix">The coordinate transform from camera space to world space.</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Manna.ProcessVideoFrameTexture(UnityEngine.Texture,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4)">
            <summary>
            Pass a video frame together with a custom texture-to-screen-coordinate
            matrix to Manna.
            </summary>
            <param name="texture">The texture.</param>
            <param name="textureToProjectedCoordinatesMatrix">The matrix mapping texture
            coordinates, expressed in the form of 4-dimensional coordinate vectors (x, y, 0, 1)
            with 0 ≤ x ≤ texture.width, 0 ≤ y ≤ texture.height, to screen coordinates.
            The matrix `textureToProjectedCoordinatesMatrix^-1 * projectionMatrix` should
            map from camera space to texture coordinates modulo division by the fourth
            coordinate of the result, and keeping the first two coordinates; namely,
            the texture coordinates corresponding to a point `(x, y, z)` in camera space
            should be obtained by running `unscaled = textureToProjectedCoordinatesMatrix^-1 * projectionMatrix * (x, y, z, 1)`,
            `scaled = unscaled / unscaled.w`, and keeping the first two coordinates
            of `scaled`. Conversely, `z * projectionMatrix^-1 * textureToProjectedCoordinatesMatrix * (x, y, 0, 1)`
            should be the camera space point at depth `z` that projects to the point whose 
            coordinates are `(x, y)` in texture space. Some standard values of the
            `textureToProjectedCoordinatesMatrix` are computed by the `DefaultTextureToNDCMatrices`
            static class.
            </param>
            <param name="projectionMatrix">The coordinate transform from camera space to
            screen coordinates, respecting the constraints described above.</param>
            <param name="worldToCameraMatrix">The coordinate transform from camera space to world
            space.</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Manna.OwnDeviceScreenPixelsPerInch">
            <summary>
            Returns the number of screen pixels per physical inch, to the best 
            of Manna's knowledge of the current device. The implicit guarantee 
            is that dividing Screen.width by this value gives the physical width of 
            the current device screen, in inches, and likewise for Screen.height.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Manna.MillisecondsSinceLastOnCalibrationSuccess">
            <summary>
            Returns the number of milliseconds since the last time Manna executed its 
            the OnCalibrationSuccess callback in the current session; is reset after (not
            right before) that callback; is -1 if OnCalibrationSuccess has not yet been called.
            </summary>
            <returns>A number of milliseconds</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Manna.SetOnBeforeCalibration(System.Action{Auki.ConjureKit.Manna.Lighthouse,System.Action{System.Boolean}})">
            <summary>
            Set a callback that is called after a calibration frame has been decided
            and allows for the developer to do some logic before the calibration and decide if it should continue.
            If the action is called with true, the calibration will continue, else it will not. 
            </summary>
            <param name="onBeforeCalibration">Callback to invoke with true (calibrate) or false (don't calibrate)</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Manna.SetStaticLighthousePoseSelector(System.Action{Auki.ConjureKit.Manna.StaticLighthouseData,System.Action{Auki.ConjureKit.Manna.LighthousePose}})">
            <summary>
            Set a callback that is called when a static lighthouse has been scanned.
            The callback should invoke the provided Action with a chosen LighthousePose from the array.
            To defer without selecting any lighthouse, invoke the poseSelector Action with `null`.
            Note that scanning will not resume until the poseSelector Action has been invoked.
            </summary>
            <param name="poseSelector">Callback when a static lighthouse has been scanned</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Manna.LighthouseRectInMetersFromScreenTopLeft">
            <summary>
            Returns a Rect whose .x .y is the  **visual bottom left** of the lighthouse,
            in Unity coordinates in the frame of reference of the screen's top left corner.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Manna.LighthouseBackgroundRectInMetersFromScreenTopLeft">
            <summary>
            Returns a Rect whose .x .y is the  **visual bottom left** of the lighthouse background frame,
            in Unity coordinates in the frame of reference of the screen's top left corner.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Manna.SetLighthouseVisible(System.Boolean)">
            <summary>
            Display/hide the on-screen instant calibration QR code.
            </summary>
            <param name="visible">`true` to display the QR code, `false` to hide it</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Manna.SetLighthousePosition(UnityEngine.Vector2)">
            <summary>
            Sets the position of the center on-screen instant calibration QR code, in pixels
            from the top left corner of the screen.
            The position values are truncated such as to prevent the code from being displayed
            too close to the screen's edge. For example, `SetLighthousePosition(Screen.width, Screen.height)`
            will result in a QR code that is inset from the bottom right of the screen.
            </summary>
            <param name="positionInIMGUICoordinates">The IMGUI (x, y) coordinates of the center of the QR code before the position is truncated to fit inside the screen</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Manna.LeftMultiplyTransformByMatrix(UnityEngine.Transform,UnityEngine.Matrix4x4)">
            <summary>
            Utility function. See usage notes in the Manna class overview.
            </summary>
            <param name="transform">A Unity Transform object</param>
            <param name="matrix">A Unity Matrix4x4 object</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Manna.LeftMultiplyTransformByMatrix(UnityEngine.GameObject,UnityEngine.Matrix4x4)">
            <summary>
            Utility function. See usage notes in the Manna class overview.
            </summary>
            <param name="gameObject">A Unity GameObject</param>
            <param name="matrix">A Unity Matrix4x4 object</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Manna._Init(System.Action,System.Action{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Auki.ConjureKit.Manna.Manna._Update">
            <inheritdoc />
        </member>
        <member name="M:Auki.ConjureKit.Manna.Manna._StoreLastCalibrationFrameData(System.Action{UnityEngine.Texture2D,UnityEngine.Texture2D,System.Int64,System.Int64,System.String})">
            <summary>
            **(Internal)** Stores debug data from last calibration.
            </summary>
            <param name="onCalibrationFrameDataReady">Callback that gives calibration video frame, video frame with detected QR corners, timestamp in ms, framestamp, and JSON-encoded coordinates environment</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Manna._StoreVideoFeedDataFrameData(System.Action{UnityEngine.Texture2D,System.Int64,System.String})">
            <summary>
            **(Internal)** Stores debug data from video feed.
            </summary>
            <param name="onVideoFeedFrameDataReady">Callback that gives last video frame processed, timestamp in ms, and JSON-encoded coordinates environment</param>
        </member>
        <member name="T:Auki.ConjureKit.Manna.StaticLighthouseData">
            <summary>
            Data for a static Lighthouse.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.StaticLighthouseData.id">
            <summary>
            Lighthouse id in long format.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.StaticLighthouseData.shortId">
            <summary>
            Lighthouse id in short format.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.StaticLighthouseData.organizationId">
            <summary>
            Lighthouse owner organization id.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.StaticLighthouseData.name">
            <summary>
            Lighthouse name.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.StaticLighthouseData.size">
            <summary>
            Physical size of a Lighthouse (in centimeters).
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.StaticLighthouseData.createdAt">
            <summary>
            Time at which the Lighthouse was created.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.StaticLighthouseData.updatedAt">
            <summary>
            Time at which the Lighthouse was last updated.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.StaticLighthouseData.poses">
            <summary>
            Array of LighthousePose%s associated with this Lighthouse.
            </summary>
        </member>
        <member name="T:Auki.ConjureKit.Manna.LighthousePose">
            <summary>
            Data for a static Lighthouse Pose that belongs to a specific domain.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.LighthousePose.domainId">
            <summary>
            Id for a domain which contains the Lighthouse.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.LighthousePose.domainName">
            <summary>
            Id for a domain which contains the Lighthouse.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.LighthousePose.addedToDomainAt">
            <summary>
            Time at which the Lighthouse was added to this domain.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.LighthousePose.placedAt">
            <summary>
            Time at which the Lighthouse was assigned this Pose.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.LighthousePose.px">
            <summary>
            Position vector X-component in OpenGL format.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.LighthousePose.py">
            <summary>
            Position vector Y-component in OpenGL format.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.LighthousePose.pz">
            <summary>
            Position vector Z-component in OpenGL format.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.LighthousePose.rx">
            <summary>
            Rotation quaternion X-component in OpenGL format.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.LighthousePose.ry">
            <summary>
            Rotation quaternion Y-component in OpenGL format.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.LighthousePose.rz">
            <summary>
            Rotation quaternion Z-component in OpenGL format.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.LighthousePose.rw">
            <summary>
            Rotation quaternion W-component in OpenGL format.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.LighthousePose.IsEqualToIdentityPose">
            <summary>
            Checks if pose is identity
            </summary>
            <returns>True if identity</returns>
        </member>
        <member name="T:Auki.ConjureKit.Manna.CalibrationFailureData">
            <summary>
            Represents data related to a calibration failure event.
            </summary>
        </member>
        <member name="T:Auki.ConjureKit.Manna.CalibrationFailureData.CalibrationFailureReason">
            <summary>
            Enumerates the possible reasons for calibration failure.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.CalibrationFailureData.CalibrationFailureReason.TrackingFailed">
            <summary>
            Tracking failure occurred during calibration.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.CalibrationFailureData.CalibrationFailureReason.LighthouseNotPlaced">
            <summary>
            Lighthouse was not properly placed for calibration.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.CalibrationFailureData.CalibrationFailureReason.NoPoseRequestResponse">
            <summary>
            No response was received for the pose request during calibration.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.CalibrationFailureData.Lighthouse">
            <summary>
            The associated lighthouse subject of the calibration failure.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.CalibrationFailureData.Pose">
            <summary>
            The pose associated with the calibration failure.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.CalibrationFailureData.Reason">
            <summary>
            The reason for the calibration failure.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.CalibrationFailureData.#ctor(Auki.ConjureKit.Manna.Lighthouse,UnityEngine.Pose,Auki.ConjureKit.Manna.CalibrationFailureData.CalibrationFailureReason)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.ConjureKit.Manna.CalibrationFailureData" /> struct.
            </summary>
            <param name="lighthouse">The lighthouse associated with the failure.</param>
            <param name="pose">The pose associated with the failure.</param>
            <param name="reason">The reason for the calibration failure.</param>
        </member>
        <member name="T:Auki.ConjureKit.Manna.Matrix4x4Extensions">
            <summary>
            A static class containing extension methods for the Matrix4x4 type.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Matrix4x4Extensions.FromToOpenGLUnityConvention(UnityEngine.Matrix4x4)">
            <summary>
            This converts transform matrices from OpenGL to Unity or vice-versa.
            Basically, flips the z-value in the matrix.
            </summary>
            <param name="openGlOrUnityTransformMatrix"></param>
            <returns>The converted Matrix4x4.</returns>
        </member>
        <member name="T:Auki.ConjureKit.Manna.FramestampOutOfBoundsException">
            <summary>
            Represents an exception thrown when a framestamp is outside the expected range.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.FramestampOutOfBoundsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.ConjureKit.Manna.FramestampOutOfBoundsException" /> class with a specific error message.
            </summary>
            <param name="message">The error message that describes the framestamp out-of-bounds exception.</param>
        </member>
        <member name="T:Auki.ConjureKit.Manna.TimestampOutOfBoundsException">
            <summary>
            Represents an exception thrown when a timestamp is outside the expected range.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.TimestampOutOfBoundsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.ConjureKit.Manna.TimestampOutOfBoundsException" /> class with a specific error message.
            </summary>
            <param name="message">The error message that describes the timestamp out-of-bounds exception.</param>
        </member>
        <member name="T:Auki.ConjureKit.Manna.BitwiseNativeArrayView">
            <summary>
            NativeArray View interface constrained to read-only operation, which indexes single bits in the array.
            This tool allows to pass a span of any existing NativeArray of bits without need of copying.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.BitwiseNativeArrayView.#ctor(Unity.Collections.NativeArray{System.UInt32},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the BitwiseNativeArrayView structure, which provides read-only access to individual bits in a NativeArray of uint values.
            </summary>
            <param name="buffer">The NativeArray of uint values containing the bits to be viewed.</param>
            <param name="startIndexInBits">The starting bit index within the NativeArray to begin the view.</param>
            <param name="lengthInBits">The length, in bits, of the view. The view is constrained to this length, but may be shorter than the provided NativeArray.</param>
        </member>
        <member name="P:Auki.ConjureKit.Manna.BitwiseNativeArrayView.Count">
            <summary>
            Gets the total number of bits in the view.
            </summary>
        </member>
        <member name="P:Auki.ConjureKit.Manna.BitwiseNativeArrayView.Length">
            <summary>
            Gets the total number of bits in the view.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.BitwiseNativeArrayView.ToBoolArray">
            <summary>
            Converts the view to a boolean array. This involves a new array being created.
            </summary>
            <returns>An array of boolean values corresponding to the bits in the view.</returns>
        </member>
        <member name="P:Auki.ConjureKit.Manna.BitwiseNativeArrayView.Item(System.Int32)">
            <summary>
            Gets the value of the bit at the specified index.
            </summary>
            <param name="index">The index of the bit to retrieve.</param>
            <returns>The value of the bit at the specified index.</returns>
        </member>
        <member name="P:Auki.ConjureKit.Manna.BitwiseNativeArrayView.IsCreated">
            <summary>
            Gets a value indicating whether the BitwiseNativeArrayView is created.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.BitwiseNativeArrayView.GetEnumerator">
            <summary>
            Provides an enumerator for iterating over the bits in the BitwiseNativeArrayView.
            </summary>
        </member>
        <member name="T:Auki.ConjureKit.Manna.BitwiseNativeArrayView.Enumerator">
            <summary>
            Enumerator for iterating over the bits in the <see cref="T:Auki.ConjureKit.Manna.BitwiseNativeArrayView" />..
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.BitwiseNativeArrayView.Enumerator.#ctor(Auki.ConjureKit.Manna.BitwiseNativeArrayView@)">
            <summary>
            Initializes the Enumerator for <see cref="T:Auki.ConjureKit.Manna.BitwiseNativeArrayView" />.
            </summary>
            <param name="array">The array the enumerator should iterate on.</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.BitwiseNativeArrayView.Enumerator.Dispose">
            <summary>
            Disposing of the enumerator.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.BitwiseNativeArrayView.Enumerator.MoveNext">
            <summary>
            Moves the enumerator to the next bit in the view.
            </summary>
            <returns>True if the enumerator was successfully moved to the next bit; otherwise, false.</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.BitwiseNativeArrayView.Enumerator.Reset">
            <summary>
            Resets the enumerator to the initial state.
            </summary>
        </member>
        <member name="P:Auki.ConjureKit.Manna.BitwiseNativeArrayView.Enumerator.Current">
            <summary>
            Gets the value of the current bit in the view.
            </summary>
        </member>
        <member name="T:Auki.ConjureKit.Manna.ScreenCorner">
            <summary>
            Defines screen corners.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.ScreenCorner.TopLeft">
            <summary>
            Top left corner.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.ScreenCorner.TopRight">
            <summary>
            Top right corner.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.ScreenCorner.BottomRight">
            <summary>
            Bottom right corner.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.ScreenCorner.BottomLeft">
            <summary>
            Bottom left corner.
            </summary>
        </member>
        <member name="T:Auki.ConjureKit.Manna.ScreenToNDCMatrices">
            <summary>
            Creates matrices for screen to NDC conversion.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.ScreenToNDCMatrices.ScreenToNDC(System.Int32,System.Int32,Auki.ConjureKit.Manna.ScreenCorner)">
            <summary>
            Returns a screen to NDC coordinates matrix.
            </summary>
            <param name="screenWidth">Screen width</param>
            <param name="screenHeight">Screen height</param>
            <param name="originOfScreenCoordinates">Origin point of screen coordinates</param>
            <returns></returns>
        </member>
        <member name="T:Auki.ConjureKit.Manna.Util">
            <summary>
            Utility class for screen and device-related operations.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.Util.InchesPerMeter">
            <summary>
            The number of inches in a meter.
            </summary>
        </member>
        <member name="F:Auki.ConjureKit.Manna.Util.MetersPerInch">
            <summary>
            The number of meters in an inch.
            </summary>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Util.SetConfigCameraOffsets(System.Collections.Generic.Dictionary{System.String,System.Single[]})">
            <summary>
            Sets the camera offsets from a configuration dictionary.
            </summary>
            <param name="cameraOffsetsFromConfig">A dictionary containing camera offsets for different device models.</param>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Util.GetScreenDPI">
            <summary>
            Gets the screen DPI (dots per inch) of the current device's screen.
            </summary>
            <returns>The screen DPI value.</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Util.GetQRCodeSafeMarginInInches">
            <summary>
            Gets the safe margin in inches for rendering QR codes on the screen.
            </summary>
            <returns>The safe margin in inches.</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Util.GetCameraOffsetInMetersFromScreenTopRight">
            <summary>
            Gets the camera offset in meters from the screen's top-right corner.
            </summary>
            <returns>The camera offset in meters.</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Util.GetScreenWidthInMeters">
            <summary>
            Gets the screen width in meters based on screen resolution.
            </summary>
            <returns>The screen width in meters.</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Util.GetScreenHeightInMeters">
            <summary>
            Gets the screen height in meters based on screen resolution.
            </summary>
            <returns>The screen height in meters.</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Util.GetScreenTopRightInMetersFromScreenTopLeft">
            <summary>
            Gets the position in meters from the screen's top-left corner to the top-right corner.
            </summary>
            <returns>The position vector in meters.</returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.Util.GetCameraOffsetInMetersFromScreenTopLeft">
            <summary>
            Gets the camera offset in meters from the screen's top-left corner.
            </summary>
            <returns>The camera offset in meters.</returns>
        </member>
        <member name="T:Auki.Barcode.Aztec.Internal.HighLevelEncoder">
            <summary>
            This produces nearly optimal encodings of text into the first-level of
            encoding used by Aztec code.
            It uses a dynamic algorithm.  For each prefix of the string, it determines
            a set of encodings that could lead to this prefix.  We repeatedly add a
            character and generate a new set of optimal encodings until we have read
            through the entire input.
            @author Frank Yellin
            @author Rustam Abdullaev
            </summary>
        </member>
        <member name="M:Auki.Barcode.Aztec.Internal.HighLevelEncoder.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Auki.Barcode.Aztec.Internal.HighLevelEncoder.encode">
            <summary>
            Convert the text represented by this High Level Encoder into a BitArray.
            </summary>
            <returns>text represented by this encoder encoded as a <see cref="T:Auki.Barcode.Common.BitArray" /></returns>
        </member>
        <member name="T:Auki.Barcode.Aztec.AztecResultMetadata">
            <summary>
            Aztec result meta data.
            </summary>
        </member>
        <member name="P:Auki.Barcode.Aztec.AztecResultMetadata.Compact">
            <summary>
            Gets a value indicating whether this Aztec code is compact.
            </summary>
            <value>
              <c>true</c> if compact; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Auki.Barcode.Aztec.AztecResultMetadata.Datablocks">
            <summary>
            Gets the nb datablocks.
            </summary>
        </member>
        <member name="P:Auki.Barcode.Aztec.AztecResultMetadata.Layers">
            <summary>
            Gets the nb layers.
            </summary>
        </member>
        <member name="M:Auki.Barcode.Aztec.AztecResultMetadata.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="compact"></param>
            <param name="datablocks"></param>
            <param name="layers"></param>
        </member>
        <member name="T:Auki.Barcode.Aztec.AztecEncodingOptions">
            <summary>
            The class holds the available options for the <see cref="T:Auki.Barcode.Aztec.AztecWriter" />
            </summary>
        </member>
        <member name="P:Auki.Barcode.Aztec.AztecEncodingOptions.ErrorCorrection">
            <summary>
            Representing the minimal percentage of error correction words. 
            Note: an Aztec symbol should have a minimum of 25% EC words.
            </summary>
        </member>
        <member name="P:Auki.Barcode.Aztec.AztecEncodingOptions.Layers">
            <summary>
            Specifies the required number of layers for an Aztec code:
            a negative number (-1, -2, -3, -4) specifies a compact Aztec code
            0 indicates to use the minimum number of layers (the default)
            a positive number (1, 2, .. 32) specifies a normal (non-compact) Aztec code
            </summary>
        </member>
        <member name="T:Auki.Barcode.BarcodeFormat">
            <summary>
            Enumerates barcode formats known to this package.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.AZTEC">
            <summary>Aztec 2D barcode format.</summary>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.CODABAR">
            <summary>CODABAR 1D format.</summary>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.CODE_39">
            <summary>Code 39 1D format.</summary>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.CODE_93">
            <summary>Code 93 1D format.</summary>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.CODE_128">
            <summary>Code 128 1D format.</summary>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.DATA_MATRIX">
            <summary>Data Matrix 2D barcode format.</summary>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.EAN_8">
            <summary>EAN-8 1D format.</summary>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.EAN_13">
            <summary>EAN-13 1D format.</summary>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.ITF">
            <summary>ITF (Interleaved Two of Five) 1D format.</summary>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.MAXICODE">
            <summary>MaxiCode 2D barcode format.</summary>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.PDF_417">
            <summary>PDF417 format.</summary>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.QR_CODE">
            <summary>QR Code 2D barcode format.</summary>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.RSS_14">
            <summary>RSS 14</summary>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.RSS_EXPANDED">
            <summary>RSS EXPANDED</summary>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.UPC_A">
            <summary>UPC-A 1D format.</summary>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.UPC_E">
            <summary>UPC-E 1D format.</summary>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.UPC_EAN_EXTENSION">
            <summary>UPC/EAN extension format. Not a stand-alone format.</summary>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.MSI">
            <summary>MSI</summary>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.PLESSEY">
            <summary>Plessey</summary>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.IMB">
            <summary>Intelligent Mail barcode</summary>
        </member>
        <member name="F:Auki.Barcode.BarcodeFormat.All_1D">
            <summary>
            UPC_A | UPC_E | EAN_13 | EAN_8 | CODABAR | CODE_39 | CODE_93 | CODE_128 | ITF | RSS_14 | RSS_EXPANDED
            without MSI (to many false-positives) and IMB (not enough tested, and it looks more like a 2D)
            </summary>
        </member>
        <member name="T:Auki.Barcode.BaseLuminanceSource">
            <summary>
            The base class for luminance sources which supports 
            cropping and rotating based upon the luminance values.
            </summary>
        </member>
        <member name="F:Auki.Barcode.BaseLuminanceSource.RChannelWeight">
            <summary>
            weight of the red channel for calculating a gray scale image
            </summary>
        </member>
        <member name="F:Auki.Barcode.BaseLuminanceSource.GChannelWeight">
            <summary>
            weight of the green channel for calculating a gray scale image
            </summary>
        </member>
        <member name="F:Auki.Barcode.BaseLuminanceSource.BChannelWeight">
            <summary>
            weight of the blue channel for calculating a gray scale image
            </summary>
        </member>
        <member name="F:Auki.Barcode.BaseLuminanceSource.ChannelWeight">
            <summary>
            numbers of bits which for right shifting
            </summary>
        </member>
        <member name="F:Auki.Barcode.BaseLuminanceSource.luminances">
            <summary>
            
            </summary>
        </member>
        <member name="M:Auki.Barcode.BaseLuminanceSource.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.BaseLuminanceSource" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Auki.Barcode.BaseLuminanceSource.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.BaseLuminanceSource" /> class.
            </summary>
            <param name="luminanceArray">The luminance array.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Auki.Barcode.BaseLuminanceSource.getRow(System.Int32,System.Byte[])">
            <summary>
            Fetches one row of luminance data from the underlying platform's bitmap. Values range from
            0 (black) to 255 (white). It is preferable for implementations of this method
            to only fetch this row rather than the whole image, since no 2D Readers may be installed and
            getMatrix() may never be called.
            </summary>
            <param name="y">The row to fetch, 0 &lt;= y &lt; Height.</param>
            <param name="row">An optional preallocated array. If null or too small, it will be ignored.
            Always use the returned object, and ignore the .length of the array.</param>
            <returns>
            An array containing the luminance data.
            </returns>
        </member>
        <member name="P:Auki.Barcode.BaseLuminanceSource.Matrix">
            <summary>
            gets the luminance matrix
            </summary>
        </member>
        <member name="M:Auki.Barcode.BaseLuminanceSource.rotateCounterClockwise">
            <summary>
            Returns a new object with rotated image data by 90 degrees counterclockwise.
            Only callable if {@link #isRotateSupported()} is true.
            </summary>
            <returns>
            A rotated version of this object.
            </returns>
        </member>
        <member name="M:Auki.Barcode.BaseLuminanceSource.rotateCounterClockwise45">
            <summary>
            TODO: not implemented yet
            </summary>
            <returns>
            A rotated version of this object.
            </returns>
        </member>
        <member name="P:Auki.Barcode.BaseLuminanceSource.RotateSupported">
            <summary>
            </summary>
            <returns> Whether this subclass supports counter-clockwise rotation.</returns>
        </member>
        <member name="M:Auki.Barcode.BaseLuminanceSource.crop(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a new object with cropped image data. Implementations may keep a reference to the
            original data rather than a copy. Only callable if CropSupported is true.
            </summary>
            <param name="left">The left coordinate, 0 &lt;= left &lt; Width.</param>
            <param name="top">The top coordinate, 0 &lt;= top &lt;= Height.</param>
            <param name="width">The width of the rectangle to crop.</param>
            <param name="height">The height of the rectangle to crop.</param>
            <returns>
            A cropped version of this object.
            </returns>
        </member>
        <member name="P:Auki.Barcode.BaseLuminanceSource.CropSupported">
            <summary>
            </summary>
            <returns> Whether this subclass supports cropping.</returns>
        </member>
        <member name="P:Auki.Barcode.BaseLuminanceSource.InversionSupported">
            <summary>
            </summary>
            <returns>Whether this subclass supports invertion.</returns>
        </member>
        <member name="M:Auki.Barcode.BaseLuminanceSource.invert">
            <summary>
            Inverts the luminance values (newValue = 255 - oldValue)
            </summary>
        </member>
        <member name="M:Auki.Barcode.BaseLuminanceSource.CreateLuminanceSource(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Should create a new luminance source with the right class type.
            The method is used in methods crop and rotate.
            </summary>
            <param name="newLuminances">The new luminances.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="T:Auki.Barcode.Common.BitArray">
            <summary>
            A simple, fast array of bits, represented compactly by an array of ints internally.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="P:Auki.Barcode.Common.BitArray.Size">
            <summary>
            size of the array, number of elements
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.BitArray.SizeInBytes">
            <summary>
            size of the array in bytes
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.BitArray.Item(System.Int32)">
            <summary>
            index accessor
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.Common.BitArray.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Auki.Barcode.Common.BitArray.#ctor(System.Int32)">
            <summary>
            initializing constructor
            </summary>
            <param name="size">desired size of the array</param>
        </member>
        <member name="M:Auki.Barcode.Common.BitArray.flip(System.Int32)">
            <summary>
            Flips bit i.
            </summary>
            <param name="i">bit to set
            </param>
        </member>
        <member name="M:Auki.Barcode.Common.BitArray.getNextSet(System.Int32)">
            <summary>
            Gets the next set.
            </summary>
            <param name="from">first bit to check</param>
            <returns>index of first bit that is set, starting from the given index, or size if none are set
            at or beyond this given index</returns>
        </member>
        <member name="M:Auki.Barcode.Common.BitArray.getNextUnset(System.Int32)">
            <summary>
            see getNextSet(int)
            </summary>
            <param name="from">index to start looking for unset bit</param>
            <returns>index of next unset bit, or <see cref="P:Auki.Barcode.Common.BitArray.Size" /> if none are unset until the end</returns>
        </member>
        <member name="M:Auki.Barcode.Common.BitArray.setBulk(System.Int32,System.Int32)">
            <summary> Sets a block of 32 bits, starting at bit i.
            
            </summary>
            <param name="i">first bit to set
            </param>
            <param name="newBits">the new value of the next 32 bits. Note again that the least-significant bit
            corresponds to bit i, the next-least-significant to i+1, and so on.
            </param>
        </member>
        <member name="M:Auki.Barcode.Common.BitArray.setRange(System.Int32,System.Int32)">
            <summary>
            Sets a range of bits.
            </summary>
            <param name="start">start of range, inclusive.</param>
            <param name="end">end of range, exclusive</param>
        </member>
        <member name="M:Auki.Barcode.Common.BitArray.clear">
            <summary> Clears all bits (sets to false).</summary>
        </member>
        <member name="M:Auki.Barcode.Common.BitArray.isRange(System.Int32,System.Int32,System.Boolean)">
            <summary> Efficient method to check if a range of bits is set, or not set.
            
            </summary>
            <param name="start">start of range, inclusive.
            </param>
            <param name="end">end of range, exclusive
            </param>
            <param name="value">if true, checks that bits in range are set, otherwise checks that they are not set
            </param>
            <returns> true iff all bits are set or not set in range, according to value argument</returns>
            <throws><exception cref="T:System.ArgumentException" /> if end is less than start or the range is not contained in the array</throws>
        </member>
        <member name="M:Auki.Barcode.Common.BitArray.appendBit(System.Boolean)">
            <summary>
            Appends the bit.
            </summary>
            <param name="bit">The bit.</param>
        </member>
        <member name="P:Auki.Barcode.Common.BitArray.Array">
            <returns> underlying array of ints. The first element holds the first 32 bits, and the least
            significant bit is bit 0.
            </returns>
        </member>
        <member name="M:Auki.Barcode.Common.BitArray.appendBits(System.Int32,System.Int32)">
            <summary>
            Appends the least-significant bits, from value, in order from most-significant to
            least-significant. For example, appending 6 bits from 0x000001E will append the bits
            0, 1, 1, 1, 1, 0 in that order.
            </summary>
            <param name="value"><see cref="T:System.Int32" /> containing bits to append</param>
            <param name="numBits">bits from value to append</param>
        </member>
        <member name="M:Auki.Barcode.Common.BitArray.appendBitArray(Auki.Barcode.Common.BitArray)">
            <summary>
            adds the array to the end
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Auki.Barcode.Common.BitArray.xor(Auki.Barcode.Common.BitArray)">
            <summary>
            XOR operation
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Auki.Barcode.Common.BitArray.toBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            converts to bytes.
            </summary>
            <param name="bitOffset">first bit to start writing</param>
            <param name="array">array to write into. Bytes are written most-significant byte first. This is the opposite
            of the internal representation, which is exposed by BitArray</param>
            <param name="offset">position in array to start writing</param>
            <param name="numBytes">how many bytes to write</param>
        </member>
        <member name="M:Auki.Barcode.Common.BitArray.reverse">
            <summary> Reverses all bits in the array.</summary>
        </member>
        <member name="M:Auki.Barcode.Common.BitArray.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="o">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Auki.Barcode.Common.BitArray.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Auki.Barcode.Common.BitArray.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Auki.Barcode.Common.BitArray.Clone">
            <summary>
            Erstellt ein neues Objekt, das eine Kopie der aktuellen Instanz darstellt.
            </summary>
            <returns>
            Ein neues Objekt, das eine Kopie dieser Instanz darstellt.
            </returns>
        </member>
        <member name="T:Auki.Barcode.Common.BitSource">
            <summary> <p>This provides an easy abstraction to read bits at a time from a sequence of bytes, where the
            number of bits read is not often a multiple of 8.</p>
            
            <p>This class is thread-safe but not reentrant. Unless the caller modifies the bytes array
            it passed in, in which case all bets are off.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:Auki.Barcode.Common.BitSource.#ctor(System.Byte[])">
            <param name="bytes">bytes from which this will read bits. Bits will be read from the first byte first.
            Bits are read within a byte from most-significant to least-significant bit.
            </param>
        </member>
        <member name="P:Auki.Barcode.Common.BitSource.BitOffset">
            <summary>
            index of next bit in current byte which would be read by the next call to {@link #readBits(int)}.
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.BitSource.ByteOffset">
            <summary>
            index of next byte in input byte array which would be read by the next call to {@link #readBits(int)}.
            </summary>
        </member>
        <member name="M:Auki.Barcode.Common.BitSource.readBits(System.Int32)">
            <param name="numBits">number of bits to read
            </param>
            <returns> int representing the bits read. The bits will appear as the least-significant
            bits of the int
            </returns>
            <exception cref="T:System.ArgumentException">if numBits isn't in [1,32] or more than is available</exception>
        </member>
        <member name="M:Auki.Barcode.Common.BitSource.available">
            <returns> number of bits that can be read successfully
            </returns>
        </member>
        <member name="T:Auki.Barcode.Common.DecoderResult">
            <summary>
            Encapsulates the result of decoding a matrix of bits. This typically
            applies to 2D barcode formats. For now it contains the raw bytes obtained,
            as well as a String interpretation of those bytes, if applicable.
            <author>Sean Owen</author>
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.DecoderResult.RawBytes">
            <summary>
            raw bytes representing the result, or null if not applicable
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.DecoderResult.NumBits">
            <summary>
            how many bits of<see cref="P:Auki.Barcode.Common.DecoderResult.RawBytes" /> are valid; typically 8 times its length
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.DecoderResult.Text">
            <summary>
            text representation of the result
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.DecoderResult.ByteSegments">
            <summary>
            list of byte segments in the result, or null if not applicable
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.DecoderResult.ECLevel">
            <summary>
            name of error correction level used, or null if not applicable
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.DecoderResult.StructuredAppend">
            <summary>
            gets a value which describe if structure append data was found
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.DecoderResult.ErrorsCorrected">
            <summary>
            number of errors corrected, or null if not applicable
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.DecoderResult.StructuredAppendSequenceNumber">
            <summary>
            gives the sequence number of the result if structured append was found
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.DecoderResult.Erasures">
            <summary>
            number of erasures corrected, or null if not applicable
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.DecoderResult.StructuredAppendParity">
            <summary>
            gives the parity information if structured append was found
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.DecoderResult.Other">
            <summary>
            Miscellanseous data value for the various decoders
            </summary>
            <value>The other.</value>
        </member>
        <member name="M:Auki.Barcode.Common.DecoderResult.#ctor(System.Byte[],System.String,System.Collections.Generic.IList{System.Byte[]},System.String)">
            <summary>
            initializing constructor
            </summary>
            <param name="rawBytes"></param>
            <param name="text"></param>
            <param name="byteSegments"></param>
            <param name="ecLevel"></param>
        </member>
        <member name="M:Auki.Barcode.Common.DecoderResult.#ctor(System.Byte[],System.String,System.Collections.Generic.IList{System.Byte[]},System.String,System.Int32,System.Int32)">
            <summary>
            initializing constructor
            </summary>
            <param name="rawBytes"></param>
            <param name="text"></param>
            <param name="byteSegments"></param>
            <param name="ecLevel"></param>
            <param name="saSequence"></param>
            <param name="saParity"></param>
        </member>
        <member name="M:Auki.Barcode.Common.DecoderResult.#ctor(System.Byte[],System.Int32,System.String,System.Collections.Generic.IList{System.Byte[]},System.String)">
            <summary>
            initializing constructor
            </summary>
            <param name="rawBytes"></param>
            <param name="numBits"></param>
            <param name="text"></param>
            <param name="byteSegments"></param>
            <param name="ecLevel"></param>
        </member>
        <member name="M:Auki.Barcode.Common.DecoderResult.#ctor(System.Byte[],System.Int32,System.String,System.Collections.Generic.IList{System.Byte[]},System.String,System.Int32,System.Int32)">
            <summary>
            initializing constructor
            </summary>
            <param name="rawBytes"></param>
            <param name="numBits"></param>
            <param name="text"></param>
            <param name="byteSegments"></param>
            <param name="ecLevel"></param>
            <param name="saSequence"></param>
            <param name="saParity"></param>
        </member>
        <member name="T:Auki.Barcode.Common.DecodingOptions">
            <summary>
            Defines an container for encoder options
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.DecodingOptions.Hints">
            <summary>
            Gets the data container for all options
            </summary>
        </member>
        <member name="E:Auki.Barcode.Common.DecodingOptions.ValueChanged">
            <summary>
            event is raised when a value is changed
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.DecodingOptions.TryHarder">
            <summary>
            Gets or sets a flag which cause a deeper look into the bitmap
            </summary>
            <value>
              <c>true</c> if [try harder]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Auki.Barcode.Common.DecodingOptions.PureBarcode">
            <summary>
            Image is a pure monochrome image of a barcode.
            </summary>
            <value>
              <c>true</c> if monochrome image of a barcode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Auki.Barcode.Common.DecodingOptions.CharacterSet">
            <summary>
            Specifies what character encoding to use when decoding, where applicable (type String)
            </summary>
            <value>
            The character set.
            </value>
        </member>
        <member name="P:Auki.Barcode.Common.DecodingOptions.PossibleFormats">
            <summary>
            Image is known to be of one of a few possible formats.
            Maps to a {@link java.util.List} of {@link BarcodeFormat}s.
            </summary>
            <value>
            The possible formats.
            </value>
        </member>
        <member name="P:Auki.Barcode.Common.DecodingOptions.UseCode39ExtendedMode">
            <summary>
            if Code39 could be detected try to use extended mode for full ASCII character set
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.DecodingOptions.UseCode39RelaxedExtendedMode">
            <summary>
            Don't fail if a Code39 is detected but can't be decoded in extended mode.
            Return the raw Code39 result instead. Maps to <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.DecodingOptions.AssumeCode39CheckDigit">
            <summary>
            Assume Code 39 codes employ a check digit. Maps to <see cref="T:System.Boolean" />.
            </summary>
            <value>
              <c>true</c> if it should assume a Code 39 check digit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Auki.Barcode.Common.DecodingOptions.ReturnCodabarStartEnd">
            <summary>
            If true, return the start and end digits in a Codabar barcode instead of stripping them. They
            are alpha, whereas the rest are numeric. By default, they are stripped, but this causes them
            to not be. Doesn't matter what it maps to; use <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.DecodingOptions.AssumeGS1">
            <summary>
            Assume the barcode is being processed as a GS1 barcode, and modify behavior as needed.
            For example this affects FNC1 handling for Code 128 (aka GS1-128).
            </summary>
            <value>
              <c>true</c> if it should assume GS1; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Auki.Barcode.Common.DecodingOptions.AssumeMSICheckDigit">
            <summary>
            Assume MSI codes employ a check digit. Maps to <see cref="T:System.Boolean" />.
            </summary>
            <value>
              <c>true</c> if it should assume a MSI check digit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Auki.Barcode.Common.DecodingOptions.AllowedLengths">
            <summary>
            Allowed lengths of encoded data -- reject anything else. Maps to an int[].
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.DecodingOptions.AllowedEANExtensions">
            <summary>
            Allowed extension lengths for EAN or UPC barcodes. Other formats will ignore this.
            Maps to an int[] of the allowed extension lengths, for example [2], [5], or [2, 5].
            If it is optional to have an extension, do not set this hint. If this is set,
            and a UPC or EAN barcode is found but an extension is not, then no result will be returned
            at all.
            </summary>
        </member>
        <member name="M:Auki.Barcode.Common.DecodingOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.Common.DecodingOptions" /> class.
            </summary>
        </member>
        <member name="T:Auki.Barcode.Common.Detector.MathUtils">
            <summary>
            General math-related and numeric utility functions.
            </summary>
        </member>
        <member name="M:Auki.Barcode.Common.Detector.MathUtils.round(System.Single)">
            <summary>
            Ends up being a bit faster than {@link Math#round(float)}. This merely rounds its
            argument to the nearest int, where x.5 rounds up to x+1. Semantics of this shortcut
            differ slightly from {@link Math#round(float)} in that half rounds down for negative
            values. -2.5 rounds to -3, not -2. For purposes here it makes no difference.
            </summary>
            <param name="d">real value to round</param>
            <returns>nearest <c>int</c></returns>
        </member>
        <member name="M:Auki.Barcode.Common.Detector.MathUtils.distance(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="aX"></param>
            <param name="aY"></param>
            <param name="bX"></param>
            <param name="bY"></param>
            <returns>Euclidean distance between points A and B</returns>
        </member>
        <member name="M:Auki.Barcode.Common.Detector.MathUtils.distance(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="aX"></param>
            <param name="aY"></param>
            <param name="bX"></param>
            <param name="bY"></param>
            <returns>Euclidean distance between points A and B</returns>
        </member>
        <member name="M:Auki.Barcode.Common.Detector.MathUtils.sum(System.Int32[])">
            <summary>
            </summary>
            <param name="array">values to sum</param>
            <returns>sum of values in array</returns>
        </member>
        <member name="T:Auki.Barcode.Common.ECI">
            <summary>
            Superclass of classes encapsulating types ECIs, according to "Extended Channel Interpretations"
            5.3 of ISO 18004.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="P:Auki.Barcode.Common.ECI.Value">
            <summary>
            the ECI value
            </summary>
        </member>
        <member name="M:Auki.Barcode.Common.ECI.getECIByValue(System.Int32)">
            <param name="val">ECI value</param>
            <returns><see cref="T:Auki.Barcode.Common.ECI" /> representing ECI of given value, or null if it is legal but unsupported</returns>
            <throws>ArgumentException if ECI value is invalid </throws>
        </member>
        <member name="T:Auki.Barcode.Common.EncodingOptions">
            <summary>
            Defines an container for encoder options
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.EncodingOptions.Hints">
            <summary>
            Gets the data container for all options
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.EncodingOptions.Height">
            <summary>
            Specifies the height of the barcode image
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.EncodingOptions.Width">
            <summary>
            Specifies the width of the barcode image
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.EncodingOptions.PureBarcode">
            <summary>
            Don't put the content string into the output image.
            </summary>
        </member>
        <member name="P:Auki.Barcode.Common.EncodingOptions.Margin">
            <summary>
            Specifies margin, in pixels, to use when generating the barcode. The meaning can vary
            by format; for example it controls margin before and after the barcode horizontally for
            most 1D formats.
            </summary>
        </member>
        <member name="M:Auki.Barcode.Common.EncodingOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.Common.EncodingOptions" /> class.
            </summary>
        </member>
        <member name="T:Auki.Barcode.Common.PerspectiveTransform">
            <summary> <p>This class implements a perspective transform in two dimensions. Given four source and four
            destination points, it will compute the transformation implied between them. The code is based
            directly upon section 3.4.2 of George Wolberg's "Digital Image Warping"; see pages 54-56.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:Auki.Barcode.Common.PerspectiveTransform.quadrilateralToQuadrilateral(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x0"></param>
            <param name="y0"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="x3"></param>
            <param name="y3"></param>
            <param name="x0p"></param>
            <param name="y0p"></param>
            <param name="x1p"></param>
            <param name="y1p"></param>
            <param name="x2p"></param>
            <param name="y2p"></param>
            <param name="x3p"></param>
            <param name="y3p"></param>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.Common.PerspectiveTransform.transformPoints(System.Single[])">
            <summary>
            
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Auki.Barcode.Common.PerspectiveTransform.transformPoints(System.Single[],System.Single[])">
            <summary>Convenience method, not optimized for performance. </summary>
        </member>
        <member name="M:Auki.Barcode.Common.PerspectiveTransform.squareToQuadrilateral(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x0"></param>
            <param name="y0"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="x3"></param>
            <param name="y3"></param>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.Common.PerspectiveTransform.quadrilateralToSquare(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x0"></param>
            <param name="y0"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="x3"></param>
            <param name="y3"></param>
            <returns></returns>
        </member>
        <member name="T:Auki.Barcode.Common.StringUtils">
            <summary>
            Common string-related functions.
            </summary>
            <author>Sean Owen</author>
            <author>Alex Dupre</author>
        </member>
        <member name="F:Auki.Barcode.Common.StringUtils.SHIFT_JIS">
            <summary>
            SJIS
            </summary>
        </member>
        <member name="F:Auki.Barcode.Common.StringUtils.GB2312">
            <summary>
            GB2312
            </summary>
        </member>
        <member name="M:Auki.Barcode.Common.StringUtils.guessEncoding(System.Byte[],System.Collections.Generic.IDictionary{Auki.Barcode.DecodeHintType,System.Object})">
            <summary>
            Guesses the encoding.
            </summary>
            <param name="bytes">bytes encoding a string, whose encoding should be guessed</param>
            <param name="hints">decode hints if applicable</param>
            <returns>name of guessed encoding; at the moment will only guess one of:
            {@link #SHIFT_JIS}, {@link #UTF8}, {@link #ISO88591}, or the platform
            default encoding if none of these can possibly be correct</returns>
        </member>
        <member name="T:Auki.Barcode.Datamatrix.Internal.Decoder">
             <summary>
             <p>The main class which implements Data Matrix Code decoding -- as opposed to locating and extracting
             the Data Matrix Code from an image.</p>
            
             <author>bbrown@google.com (Brian Brown)</author>
             </summary>
        </member>
        <member name="M:Auki.Barcode.Datamatrix.Internal.Decoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.Datamatrix.Internal.Decoder" /> class.
            </summary>
        </member>
        <member name="M:Auki.Barcode.Datamatrix.Internal.Decoder.decode(System.Boolean[][])">
             <summary>
             <p>Convenience method that can decode a Data Matrix Code represented as a 2D array of booleans.
             "true" is taken to mean a black module.</p>
            
             <param name="image">booleans representing white/black Data Matrix Code modules</param>
             <returns>text and bytes encoded within the Data Matrix Code</returns>
             <exception cref="T:Auki.Barcode.FormatException">if the Data Matrix Code cannot be decoded</exception>
             </summary>
        </member>
        <member name="T:Auki.Barcode.Datamatrix.Internal.Version">
             <summary>
             The Version object encapsulates attributes about a particular
             size Data Matrix Code.
            
             <author>bbrown@google.com (Brian Brown)</author>
             </summary>
        </member>
        <member name="M:Auki.Barcode.Datamatrix.Internal.Version.getVersionNumber">
            <summary>
            returns the version numer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.Datamatrix.Internal.Version.getSymbolSizeRows">
            <summary>
            returns the symbol size rows
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.Datamatrix.Internal.Version.getSymbolSizeColumns">
            <summary>
            returns the symbols size columns
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.Datamatrix.Internal.Version.getDataRegionSizeRows">
            <summary>
            retursn the data region size rows
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.Datamatrix.Internal.Version.getDataRegionSizeColumns">
            <summary>
            returns the data region size columns
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.Datamatrix.Internal.Version.getTotalCodewords">
            <summary>
            returns the total codewords count
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.Datamatrix.Internal.Version.getVersionForDimensions(System.Int32,System.Int32)">
             <summary>
             <p>Deduces version information from Data Matrix dimensions.</p>
            
             <param name="numRows">Number of rows in modules</param>
             <param name="numColumns">Number of columns in modules</param>
             <returns>Version for a Data Matrix Code of those dimensions</returns>
             <exception cref="T:Auki.Barcode.FormatException">if dimensions do correspond to a valid Data Matrix size</exception>
             </summary>
        </member>
        <member name="M:Auki.Barcode.Datamatrix.Internal.Version.ToString">
            <summary>
            returns the version number as string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Auki.Barcode.DecodeHintType">
            <summary>
            Encapsulates a type of hint that a caller may pass to a barcode reader to help it
            more quickly or accurately decode it. It is up to implementations to decide what,
            if anything, to do with the information that is supplied.
            <seealso cref="M:Auki.Barcode.Reader.decode(Auki.Barcode.BinaryBitmap,System.Collections.Generic.IDictionary{Auki.Barcode.DecodeHintType,System.Object})" />
            </summary>
            <author>Sean Owen</author>
            <author>dswitkin@google.com (Daniel Switkin)</author>
        </member>
        <member name="F:Auki.Barcode.DecodeHintType.OTHER">
            <summary>
            Unspecified, application-specific hint. Maps to an unspecified <see cref="T:System.Object" />.
            </summary>
        </member>
        <member name="F:Auki.Barcode.DecodeHintType.PURE_BARCODE">
            <summary>
            Image is a pure monochrome image of a barcode. Doesn't matter what it maps to;
            use <see cref="T:System.Boolean" /> = true.
            </summary>
        </member>
        <member name="F:Auki.Barcode.DecodeHintType.POSSIBLE_FORMATS">
            <summary>
            Image is known to be of one of a few possible formats.
            Maps to a <see cref="T:System.Collections.ICollection" /> of <see cref="T:Auki.Barcode.BarcodeFormat" />s.
            </summary>
        </member>
        <member name="F:Auki.Barcode.DecodeHintType.TRY_HARDER">
            <summary>
            Spend more time to try to find a barcode; optimize for accuracy, not speed.
            Doesn't matter what it maps to; use <see cref="T:System.Boolean" /> = true.
            </summary>
        </member>
        <member name="F:Auki.Barcode.DecodeHintType.CHARACTER_SET">
            <summary>
            Specifies what character encoding to use when decoding, where applicable (type String)
            </summary>
        </member>
        <member name="F:Auki.Barcode.DecodeHintType.ALLOWED_LENGTHS">
            <summary>
            Allowed lengths of encoded data -- reject anything else. Maps to an int[].
            </summary>
        </member>
        <member name="F:Auki.Barcode.DecodeHintType.ASSUME_CODE_39_CHECK_DIGIT">
            <summary>
            Assume Code 39 codes employ a check digit. Maps to <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:Auki.Barcode.DecodeHintType.NEED_RESULT_POINT_CALLBACK">
            <summary>
            The caller needs to be notified via callback when a possible <see cref="T:Auki.Barcode.ResultPoint" />
            is found. Maps to a <see cref="T:Auki.Barcode.ResultPointCallback" />.
            </summary>
        </member>
        <member name="F:Auki.Barcode.DecodeHintType.ASSUME_MSI_CHECK_DIGIT">
            <summary>
            Assume MSI codes employ a check digit. Maps to <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:Auki.Barcode.DecodeHintType.USE_CODE_39_EXTENDED_MODE">
            <summary>
            if Code39 could be detected try to use extended mode for full ASCII character set
            Maps to <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:Auki.Barcode.DecodeHintType.RELAXED_CODE_39_EXTENDED_MODE">
            <summary>
            Don't fail if a Code39 is detected but can't be decoded in extended mode.
            Return the raw Code39 result instead. Maps to <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:Auki.Barcode.DecodeHintType.TRY_HARDER_WITHOUT_ROTATION">
            <summary>
            1D readers supporting rotation with TRY_HARDER enabled.
            But BarcodeReader class can do auto-rotating for 1D and 2D codes.
            Enabling that option prevents 1D readers doing double rotation.
            BarcodeReader enables that option automatically if "global" auto-rotation is enabled.
            Maps to <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:Auki.Barcode.DecodeHintType.ASSUME_GS1">
            <summary>
            Assume the barcode is being processed as a GS1 barcode, and modify behavior as needed.
            For example this affects FNC1 handling for Code 128 (aka GS1-128). Doesn't matter what it maps to;
            use <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:Auki.Barcode.DecodeHintType.RETURN_CODABAR_START_END">
            <summary>
            If true, return the start and end digits in a Codabar barcode instead of stripping them. They
            are alpha, whereas the rest are numeric. By default, they are stripped, but this causes them
            to not be. Doesn't matter what it maps to; use <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:Auki.Barcode.DecodeHintType.ALLOWED_EAN_EXTENSIONS">
            <summary>
            Allowed extension lengths for EAN or UPC barcodes. Other formats will ignore this.
            Maps to an int[] of the allowed extension lengths, for example [2], [5], or [2, 5].
            If it is optional to have an extension, do not set this hint. If this is set,
            and a UPC or EAN barcode is found but an extension is not, then no result will be returned
            at all.
            </summary>
        </member>
        <member name="T:Auki.Barcode.Dimension">
            <summary>
            Simply encapsulates a width and height.
            </summary>
        </member>
        <member name="M:Auki.Barcode.Dimension.#ctor(System.Int32,System.Int32)">
            <summary>
            initializing constructor
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="P:Auki.Barcode.Dimension.Width">
            <summary>
            the width
            </summary>
        </member>
        <member name="P:Auki.Barcode.Dimension.Height">
            <summary>
            the height
            </summary>
        </member>
        <member name="M:Auki.Barcode.Dimension.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.Dimension.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.Dimension.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Auki.Barcode.EncodeHintType">
            <summary>
            These are a set of hints that you may pass to Writers to specify their behavior.
            </summary>
            <author>dswitkin@google.com (Daniel Switkin)</author>
        </member>
        <member name="F:Auki.Barcode.EncodeHintType.WIDTH">
            <summary>
            Specifies the width of the barcode image
            type: <see cref="T:System.Int32" />
            </summary>
        </member>
        <member name="F:Auki.Barcode.EncodeHintType.HEIGHT">
            <summary>
            Specifies the height of the barcode image
            type: <see cref="T:System.Int32" />
            </summary>
        </member>
        <member name="F:Auki.Barcode.EncodeHintType.PURE_BARCODE">
            <summary>
            Don't put the content string into the output image.
            type: <see cref="T:System.Boolean" />
            </summary>
        </member>
        <member name="F:Auki.Barcode.EncodeHintType.ERROR_CORRECTION">
            <summary>
            Specifies what degree of error correction to use, for example in QR Codes.
            Type depends on the encoder. For example for QR codes it's type
            <see cref="T:Auki.Barcode.QrCode.Internal.ErrorCorrectionLevel" />
            For Aztec it is of type <see cref="T:System.Int32" />, representing the minimal percentage of error correction words. 
            In all cases, it can also be a <see cref="T:System.String" /> representation of the desired value as well.
            Note: an Aztec symbol should have a minimum of 25% EC words.
            For PDF417 it is of type <see cref="T:Auki.Barcode.PDF417.Internal.PDF417ErrorCorrectionLevel" /> or <see cref="T:System.Int32" /> (between 0 and 8),
            </summary>
        </member>
        <member name="F:Auki.Barcode.EncodeHintType.CHARACTER_SET">
            <summary>
            Specifies what character encoding to use where applicable.
            type: <see cref="T:System.String" />
            </summary>
        </member>
        <member name="F:Auki.Barcode.EncodeHintType.MARGIN">
            <summary>
            Specifies margin, in pixels, to use when generating the barcode. The meaning can vary
            by format; for example it controls margin before and after the barcode horizontally for
            most 1D formats.
            type: <see cref="T:System.Int32" />, or <see cref="T:System.String" /> representation of the integer value
            </summary>
        </member>
        <member name="F:Auki.Barcode.EncodeHintType.PDF417_COMPACT">
            <summary>
            Specifies whether to use compact mode for PDF417
            type: <see cref="T:System.Boolean" />, or "true" or "false"
            <see cref="T:System.String" /> value
            </summary>
        </member>
        <member name="F:Auki.Barcode.EncodeHintType.PDF417_COMPACTION">
            <summary>
            Specifies what compaction mode to use for PDF417.
            type: <see cref="T:Auki.Barcode.PDF417.Internal.Compaction" /> or <see cref="T:System.String" /> value of one of its
            enum values
            </summary>
        </member>
        <member name="F:Auki.Barcode.EncodeHintType.PDF417_DIMENSIONS">
            <summary>
            Specifies the minimum and maximum number of rows and columns for PDF417.
            type: <see cref="T:Auki.Barcode.PDF417.Internal.Dimensions" />
            </summary>
        </member>
        <member name="F:Auki.Barcode.EncodeHintType.DISABLE_ECI">
            <summary>
            Don't append ECI segment.
            That is against the specification of QR Code but some
            readers have problems if the charset is switched from
            ISO-8859-1 (default) to UTF-8 with the necessary ECI segment.
            If you set the property to true you can use UTF-8 encoding
            and the ECI segment is omitted.
            type: <see cref="T:System.Boolean" />
            </summary>
        </member>
        <member name="F:Auki.Barcode.EncodeHintType.DATA_MATRIX_SHAPE">
            <summary>
            Specifies the matrix shape for Data Matrix (type <see cref="T:Auki.Barcode.Datamatrix.Encoder.SymbolShapeHint" />)
            </summary>
        </member>
        <member name="F:Auki.Barcode.EncodeHintType.MIN_SIZE">
            <summary>
            Specifies a minimum barcode size (type <see cref="T:Auki.Barcode.Dimension" />). Only applicable to Data Matrix now.
            </summary>
        </member>
        <member name="F:Auki.Barcode.EncodeHintType.MAX_SIZE">
            <summary>
            Specifies a maximum barcode size (type <see cref="T:Auki.Barcode.Dimension" />). Only applicable to Data Matrix now.
            </summary>
        </member>
        <member name="F:Auki.Barcode.EncodeHintType.CODE128_FORCE_CODESET_B">
            <summary>
            if true, don't switch to codeset C for numbers
            </summary>
        </member>
        <member name="F:Auki.Barcode.EncodeHintType.DATA_MATRIX_DEFAULT_ENCODATION">
            <summary>
            Specifies the default encodation for Data Matrix (type <see cref="T:Auki.Barcode.Datamatrix.Encoder.Encodation" />)
            Make sure that the content fits into the encodation value, otherwise there will be an exception thrown.
            standard value: Encodation.ASCII
            </summary>
        </member>
        <member name="F:Auki.Barcode.EncodeHintType.AZTEC_LAYERS">
            <summary>
            Specifies the required number of layers for an Aztec code.
            A negative number (-1, -2, -3, -4) specifies a compact Aztec code
            0 indicates to use the minimum number of layers (the default)
            A positive number (1, 2, .. 32) specifies a normal (non-compact) Aztec code
            type: <see cref="T:System.Int32" />, or <see cref="T:System.String" /> representation of the integer value
            </summary>
        </member>
        <member name="F:Auki.Barcode.EncodeHintType.QR_VERSION">
            <summary>
            Specifies the exact version of QR code to be encoded.
            (Type <see cref="T:System.Int32" />, or <see cref="T:System.String" /> representation of the integer value).
            </summary>
        </member>
        <member name="T:Auki.Barcode.FormatException">
            <summary>
            Thrown when a barcode was successfully detected, but some aspect of
            the content did not conform to the barcode's format rules. This could have
            been due to a mis-detection.
            <author>Sean Owen</author>
            </summary>
        </member>
        <member name="M:Auki.Barcode.FormatException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Auki.Barcode.FormatException.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Auki.Barcode.FormatException.#ctor(System.Exception)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Auki.Barcode.FormatException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Auki.Barcode.IBarcodeReader`1">
            <summary>
            Interface for a smart class to decode the barcode inside a bitmap object
            </summary>
            <summary>
            Interface for a smart class to decode multiple barcodes inside a bitmap object
            </summary>
        </member>
        <member name="M:Auki.Barcode.IBarcodeReader`1.Decode(`0)">
            <summary>
            Decodes the specified barcode bitmap.
            </summary>
            <param name="barcodeBitmap">The barcode bitmap.</param>
            <returns>the result data or null</returns>
        </member>
        <member name="M:Auki.Barcode.IBarcodeReader`1.DecodeMultiple(`0)">
            <summary>
            Decodes the specified barcode bitmap.
            </summary>
            <param name="barcodeBitmap">The barcode bitmap.</param>
            <returns>the result data or null</returns>
        </member>
        <member name="T:Auki.Barcode.IBarcodeReaderGeneric">
            <summary>
            Interface for a smart class to decode the barcode inside a bitmap object
            </summary>
            <summary>
            Interface for a smart class to decode multiple barcodes inside a bitmap object
            </summary>
        </member>
        <member name="E:Auki.Barcode.IBarcodeReaderGeneric.ResultPointFound">
            <summary>
            event is executed when a result point was found
            </summary>
        </member>
        <member name="E:Auki.Barcode.IBarcodeReaderGeneric.ResultFound">
            <summary>
            event is executed when a result was found via decode
            </summary>
        </member>
        <member name="P:Auki.Barcode.IBarcodeReaderGeneric.Options">
            <summary>
            Specifies some options which influence the decoding process
            </summary>
        </member>
        <member name="M:Auki.Barcode.IBarcodeReaderGeneric.Decode(System.Byte[],System.Int32,System.Int32,Auki.Barcode.RGBLuminanceSource.BitmapFormat)">
            <summary>
            Decodes the specified barcode bitmap which is given by a generic byte array.
            </summary>
            <param name="rawRGB">The barcode bitmap.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <returns>
            the result data or null
            </returns>
        </member>
        <member name="M:Auki.Barcode.IBarcodeReaderGeneric.Decode(Auki.Barcode.LuminanceSource)">
            <summary>
            Tries to decode a barcode within an image which is given by a luminance source.
            That method gives a chance to prepare a luminance source completely before calling
            the time consuming decoding method. On the other hand there is a chance to create
            a luminance source which is independent from external resources (like Bitmap objects)
            and the decoding call can be made in a background thread.
            </summary>
            <param name="luminanceSource">The luminance source.</param>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.IBarcodeReaderGeneric.DecodeMultiple(System.Byte[],System.Int32,System.Int32,Auki.Barcode.RGBLuminanceSource.BitmapFormat)">
            <summary>
            Decodes the specified barcode bitmap which is given by a generic byte array with the order RGB24.
            </summary>
            <param name="rawRGB">The barcode bitmap.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <returns>
            the result data or null
            </returns>
        </member>
        <member name="M:Auki.Barcode.IBarcodeReaderGeneric.DecodeMultiple(Auki.Barcode.LuminanceSource)">
            <summary>
            Tries to decode barcodes within an image which is given by a luminance source.
            That method gives a chance to prepare a luminance source completely before calling
            the time consuming decoding method. On the other hand there is a chance to create
            a luminance source which is independent from external resources (like Bitmap objects)
            and the decoding call can be made in a background thread.
            </summary>
            <param name="luminanceSource">The luminance source.</param>
            <returns></returns>
        </member>
        <member name="T:Auki.Barcode.InvertedLuminanceSource">
            <summary>
            A wrapper implementation of {@link LuminanceSource} which inverts the luminances it returns -- black becomes
            white and vice versa, and each value becomes (255-value).
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:Auki.Barcode.InvertedLuminanceSource.#ctor(Auki.Barcode.LuminanceSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.InvertedLuminanceSource" /> class.
            </summary>
            <param name="delegate">The @delegate.</param>
        </member>
        <member name="M:Auki.Barcode.InvertedLuminanceSource.getRow(System.Int32,System.Byte[])">
            <summary>
            Fetches one row of luminance data from the underlying platform's bitmap. Values range from
            0 (black) to 255 (white). Because Java does not have an unsigned byte type, callers will have
            to bitwise and with 0xff for each value. It is preferable for implementations of this method
            to only fetch this row rather than the whole image, since no 2D Readers may be installed and
            getMatrix() may never be called.
            </summary>
            <param name="y">The row to fetch, 0 &lt;= y &lt; Height.</param>
            <param name="row">An optional preallocated array. If null or too small, it will be ignored.
            Always use the returned object, and ignore the .length of the array.</param>
            <returns>
            An array containing the luminance data.
            </returns>
        </member>
        <member name="P:Auki.Barcode.InvertedLuminanceSource.Matrix">
            <summary>
            Fetches luminance data for the underlying bitmap. Values should be fetched using:
            int luminance = array[y * width + x] &amp; 0xff;
            </summary>
            <returns> A row-major 2D array of luminance values. Do not use result.length as it may be
            larger than width * height bytes on some platforms. Do not modify the contents
            of the result.
              </returns>
        </member>
        <member name="P:Auki.Barcode.InvertedLuminanceSource.CropSupported">
            <summary>
            </summary>
            <returns> Whether this subclass supports cropping.</returns>
        </member>
        <member name="M:Auki.Barcode.InvertedLuminanceSource.crop(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a new object with cropped image data. Implementations may keep a reference to the
            original data rather than a copy. Only callable if CropSupported is true.
            </summary>
            <param name="left">The left coordinate, 0 &lt;= left &lt; Width.</param>
            <param name="top">The top coordinate, 0 &lt;= top &lt;= Height.</param>
            <param name="width">The width of the rectangle to crop.</param>
            <param name="height">The height of the rectangle to crop.</param>
            <returns>
            A cropped version of this object.
            </returns>
        </member>
        <member name="P:Auki.Barcode.InvertedLuminanceSource.RotateSupported">
            <summary>
            </summary>
            <returns> Whether this subclass supports counter-clockwise rotation.</returns>
        </member>
        <member name="M:Auki.Barcode.InvertedLuminanceSource.invert">
            <summary>
            Inverts this instance.
            </summary>
            <returns>original delegate {@link LuminanceSource} since invert undoes itself</returns>
        </member>
        <member name="M:Auki.Barcode.InvertedLuminanceSource.rotateCounterClockwise">
            <summary>
            Returns a new object with rotated image data by 90 degrees counterclockwise.
            Only callable if {@link #isRotateSupported()} is true.
            </summary>
            <returns>
            A rotated version of this object.
            </returns>
        </member>
        <member name="M:Auki.Barcode.InvertedLuminanceSource.rotateCounterClockwise45">
            <summary>
            Returns a new object with rotated image data by 45 degrees counterclockwise.
            Only callable if {@link #isRotateSupported()} is true.
            </summary>
            <returns>
            A rotated version of this object.
            </returns>
        </member>
        <member name="T:Auki.Barcode.LuminanceSource">
            <summary>
            The purpose of this class hierarchy is to abstract different bitmap implementations across
            platforms into a standard interface for requesting greyscale luminance values. The interface
            only provides immutable methods; therefore crop and rotation create copies. This is to ensure
            that one Reader does not modify the original luminance source and leave it in an unknown state
            for other Readers in the chain.
            </summary>
            <author>dswitkin@google.com (Daniel Switkin)</author>
        </member>
        <member name="M:Auki.Barcode.LuminanceSource.#ctor(System.Int32,System.Int32)">
            <summary>
            initializing constructor
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Auki.Barcode.LuminanceSource.getRow(System.Int32,System.Byte[])">
            <summary>
            Fetches one row of luminance data from the underlying platform's bitmap. Values range from
            0 (black) to 255 (white). Because Java does not have an unsigned byte type, callers will have
            to bitwise and with 0xff for each value. It is preferable for implementations of this method
            to only fetch this row rather than the whole image, since no 2D Readers may be installed and
            getMatrix() may never be called.
            </summary>
            <param name="y">The row to fetch, which must be in [0, bitmap height)</param>
            <param name="row">An optional preallocated array. If null or too small, it will be ignored.
            Always use the returned object, and ignore the .length of the array.
            </param>
            <returns> An array containing the luminance data.</returns>
        </member>
        <member name="P:Auki.Barcode.LuminanceSource.Matrix">
            <summary>
            Fetches luminance data for the underlying bitmap. Values should be fetched using:
            <code>int luminance = array[y * width + x] &amp; 0xff</code>
            </summary>
            <returns>
            A row-major 2D array of luminance values. Do not use result.length as it may be
            larger than width * height bytes on some platforms. Do not modify the contents
            of the result.
            </returns>
        </member>
        <member name="P:Auki.Barcode.LuminanceSource.Width">
            <returns> The width of the bitmap.</returns>
        </member>
        <member name="P:Auki.Barcode.LuminanceSource.Height">
            <returns> The height of the bitmap.</returns>
        </member>
        <member name="P:Auki.Barcode.LuminanceSource.CropSupported">
            <returns> Whether this subclass supports cropping.</returns>
        </member>
        <member name="M:Auki.Barcode.LuminanceSource.crop(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> 
            Returns a new object with cropped image data. Implementations may keep a reference to the
            original data rather than a copy. Only callable if CropSupported is true.
            </summary>
            <param name="left">The left coordinate, which must be in [0, Width)</param>
            <param name="top">The top coordinate, which must be in [0, Height)</param>
            <param name="width">The width of the rectangle to crop.</param>
            <param name="height">The height of the rectangle to crop.</param>
            <returns> A cropped version of this object.</returns>
        </member>
        <member name="P:Auki.Barcode.LuminanceSource.RotateSupported">
            <returns> Whether this subclass supports counter-clockwise rotation.</returns>
        </member>
        <member name="M:Auki.Barcode.LuminanceSource.rotateCounterClockwise">
            <summary>
            Returns a new object with rotated image data by 90 degrees counterclockwise.
            Only callable if <see cref="P:Auki.Barcode.LuminanceSource.RotateSupported" /> is true.
            </summary>
            <returns>A rotated version of this object.</returns>
        </member>
        <member name="M:Auki.Barcode.LuminanceSource.rotateCounterClockwise45">
            <summary>
            Returns a new object with rotated image data by 45 degrees counterclockwise.
            Only callable if <see cref="P:Auki.Barcode.LuminanceSource.RotateSupported" /> is true.
            </summary>
            <returns>A rotated version of this object.</returns>
        </member>
        <member name="P:Auki.Barcode.LuminanceSource.InversionSupported">
            <summary>
            </summary>
            <returns>Whether this subclass supports invertion.</returns>
        </member>
        <member name="M:Auki.Barcode.LuminanceSource.invert">
            <summary>
            inverts the luminance values, not supported here. has to implemented in sub classes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.LuminanceSource.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Auki.Barcode.OneD.Code128EncodingOptions">
            <summary>
            The class holds the available options for the QrCodeWriter
            </summary>
        </member>
        <member name="P:Auki.Barcode.OneD.Code128EncodingOptions.ForceCodesetB">
            <summary>
            if true, don't switch to codeset C for numbers
            </summary>
        </member>
        <member name="T:Auki.Barcode.OneD.RSS.DataCharacter">
            <summary>
            Encapsulates a since character value in an RSS barcode, including its checksum information.
            </summary>
        </member>
        <member name="P:Auki.Barcode.OneD.RSS.DataCharacter.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:Auki.Barcode.OneD.RSS.DataCharacter.ChecksumPortion">
            <summary>
            Gets the checksum portion.
            </summary>
        </member>
        <member name="M:Auki.Barcode.OneD.RSS.DataCharacter.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.OneD.RSS.DataCharacter" /> class.
            </summary>
            <param name="value">The value.</param>
            <param name="checksumPortion">The checksum portion.</param>
        </member>
        <member name="M:Auki.Barcode.OneD.RSS.DataCharacter.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Auki.Barcode.OneD.RSS.DataCharacter.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="o">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Auki.Barcode.OneD.RSS.DataCharacter.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Auki.Barcode.OneD.RSS.Expanded.Decoders.AbstractExpandedDecoder">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            <author>Eduardo Castillejo, University of Deusto (eduardo.castillejo@deusto.es)</author>
            </summary>
        </member>
        <member name="M:Auki.Barcode.OneD.RSS.Expanded.Decoders.AbstractExpandedDecoder.getInformation">
            <summary>
            Gets the information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.OneD.RSS.Expanded.Decoders.AbstractExpandedDecoder.parseInformation">
            <summary>
            Parses the information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.OneD.RSS.Expanded.Decoders.AbstractExpandedDecoder.createDecoder(Auki.Barcode.Common.BitArray)">
            <summary>
            Creates the decoder.
            </summary>
            <param name="information">The information.</param>
            <returns></returns>
        </member>
        <member name="T:Auki.Barcode.OneD.RSS.FinderPattern">
            <summary>
            Encapsulates an RSS barcode finder pattern, including its start/end position and row.
            </summary>
        </member>
        <member name="P:Auki.Barcode.OneD.RSS.FinderPattern.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:Auki.Barcode.OneD.RSS.FinderPattern.StartEnd">
            <summary>
            Gets the start end.
            </summary>
        </member>
        <member name="P:Auki.Barcode.OneD.RSS.FinderPattern.ResultPoints">
            <summary>
            Gets the result points.
            </summary>
        </member>
        <member name="M:Auki.Barcode.OneD.RSS.FinderPattern.#ctor(System.Int32,System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.OneD.RSS.FinderPattern" /> class.
            </summary>
            <param name="value">The value.</param>
            <param name="startEnd">The start end.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="rowNumber">The row number.</param>
        </member>
        <member name="M:Auki.Barcode.OneD.RSS.FinderPattern.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="o">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Auki.Barcode.OneD.RSS.FinderPattern.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Auki.Barcode.OneD.RSS.RSSUtils">
            <summary>
            Adapted from listings in ISO/IEC 24724 Appendix B and Appendix G.
            </summary>
        </member>
        <member name="M:Auki.Barcode.OneD.RSS.RSSUtils.getRSSvalue(System.Int32[],System.Int32,System.Boolean)">
            <summary>
            Gets the RS svalue.
            </summary>
            <param name="widths">The widths.</param>
            <param name="maxWidth">Width of the max.</param>
            <param name="noNarrow">if set to <c>true</c> [no narrow].</param>
            <returns></returns>
        </member>
        <member name="T:Auki.Barcode.PDF417.Internal.BarcodeValue">
            <summary>
            A Barcode Value for the PDF417 barcode.  
            The scanner will iterate through the bitmatrix, 
            and given the different methods or iterations 
            will increment a given barcode value's confidence.
            
            When done, this will return the values of highest confidence.
            </summary>
            <author>Guenther Grau</author>
        </member>
        <member name="M:Auki.Barcode.PDF417.Internal.BarcodeValue.setValue(System.Int32)">
             <summary>
             Incremenets the Confidence for a given value. (Adds an occurance of a value)
            
             </summary>
             <param name="value">Value.</param>
        </member>
        <member name="M:Auki.Barcode.PDF417.Internal.BarcodeValue.getValue">
            <summary>
            Determines the maximum occurrence of a set value and returns all values which were set with this occurrence.
            </summary>
            <returns>an array of int, containing the values with the highest occurrence, or null, if no value was set.</returns>
        </member>
        <member name="T:Auki.Barcode.PDF417.Internal.EC.ErrorCorrection">
            <summary>
            <p>PDF417 error correction implementation.</p>
            <p>This <a href="http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction#Example">example</a>
            is quite useful in understanding the algorithm.</p>
            <author>Sean Owen</author>
            <see cref="T:Auki.Barcode.Common.ReedSolomon.ReedSolomonDecoder" />
            </summary>
        </member>
        <member name="M:Auki.Barcode.PDF417.Internal.EC.ErrorCorrection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.PDF417.Internal.EC.ErrorCorrection" /> class.
            </summary>
        </member>
        <member name="M:Auki.Barcode.PDF417.Internal.EC.ErrorCorrection.decode(System.Int32[],System.Int32,System.Int32[],System.Int32@)">
            <summary>
            Decodes the specified received.
            </summary>
            <param name="received">received codewords</param>
            <param name="numECCodewords">number of those codewords used for EC</param>
            <param name="erasures">location of erasures</param>
            <param name="errorLocationsCount">The error locations count.</param>
            <returns></returns>
        </member>
        <member name="T:Auki.Barcode.PDF417.Internal.PDF417CodewordDecoder">
            <summary>
            
            </summary>
            <author>Guenther Grau</author>
            <author>creatale GmbH (christoph.schulz@creatale.de)</author>
        </member>
        <member name="M:Auki.Barcode.PDF417.Internal.PDF417CodewordDecoder.getDecodedValue(System.Int32[])">
            <summary>
            Gets the decoded value.
            </summary>
            <returns>The decoded value.</returns>
            <param name="moduleBitCount">Module bit count.</param>
        </member>
        <member name="T:Auki.Barcode.PDF417.Internal.Compaction">
            <summary>
            Represents possible PDF417 barcode compaction types.
            </summary>
        </member>
        <member name="F:Auki.Barcode.PDF417.Internal.Compaction.AUTO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Auki.Barcode.PDF417.Internal.Compaction.TEXT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Auki.Barcode.PDF417.Internal.Compaction.BYTE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Auki.Barcode.PDF417.Internal.Compaction.NUMERIC">
            <summary>
            
            </summary>
        </member>
        <member name="T:Auki.Barcode.PDF417.Internal.Dimensions">
            <summary>
            Data object to specify the minimum and maximum number of rows and columns for a PDF417 barcode.
            @author qwandor@google.com (Andrew Walbran)
            </summary>
        </member>
        <member name="M:Auki.Barcode.PDF417.Internal.Dimensions.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.PDF417.Internal.Dimensions" /> class.
            </summary>
            <param name="minCols">The min cols.</param>
            <param name="maxCols">The max cols.</param>
            <param name="minRows">The min rows.</param>
            <param name="maxRows">The max rows.</param>
        </member>
        <member name="P:Auki.Barcode.PDF417.Internal.Dimensions.MinCols">
            <summary>
            Gets the min cols.
            </summary>
        </member>
        <member name="P:Auki.Barcode.PDF417.Internal.Dimensions.MaxCols">
            <summary>
            Gets the max cols.
            </summary>
        </member>
        <member name="P:Auki.Barcode.PDF417.Internal.Dimensions.MinRows">
            <summary>
            Gets the min rows.
            </summary>
        </member>
        <member name="P:Auki.Barcode.PDF417.Internal.Dimensions.MaxRows">
            <summary>
            Gets the max rows.
            </summary>
        </member>
        <member name="T:Auki.Barcode.PlanarYUVLuminanceSource">
            <summary>
            This object extends LuminanceSource around an array of YUV data returned from the camera driver,
            with the option to crop to a rectangle within the full data. This can be used to exclude
            superfluous pixels around the perimeter and speed up decoding.
            It works for any pixel format where the Y channel is planar and appears first, including
            YCbCr_420_SP and YCbCr_422_SP.
            @author dswitkin@google.com (Daniel Switkin)
            </summary>
        </member>
        <member name="M:Auki.Barcode.PlanarYUVLuminanceSource.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.PlanarYUVLuminanceSource" /> class.
            </summary>
            <param name="yuvData">The yuv data.</param>
            <param name="dataWidth">Width of the data.</param>
            <param name="dataHeight">Height of the data.</param>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="reverseHoriz">if set to <c>true</c> [reverse horiz].</param>
        </member>
        <member name="M:Auki.Barcode.PlanarYUVLuminanceSource.getRow(System.Int32,System.Byte[])">
            <summary>
            Fetches one row of luminance data from the underlying platform's bitmap. Values range from
            0 (black) to 255 (white). Because Java does not have an unsigned byte type, callers will have
            to bitwise and with 0xff for each value. It is preferable for implementations of this method
            to only fetch this row rather than the whole image, since no 2D Readers may be installed and
            getMatrix() may never be called.
            </summary>
            <param name="y">The row to fetch, 0 &lt;= y &lt; Height.</param>
            <param name="row">An optional preallocated array. If null or too small, it will be ignored.
            Always use the returned object, and ignore the .length of the array.</param>
            <returns>
            An array containing the luminance data.
            </returns>
        </member>
        <member name="P:Auki.Barcode.PlanarYUVLuminanceSource.Matrix">
            <summary>
            
            </summary>
        </member>
        <member name="P:Auki.Barcode.PlanarYUVLuminanceSource.CropSupported">
            <summary>
            </summary>
            <returns> Whether this subclass supports cropping.</returns>
        </member>
        <member name="M:Auki.Barcode.PlanarYUVLuminanceSource.crop(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a new object with cropped image data. Implementations may keep a reference to the
            original data rather than a copy. Only callable if CropSupported is true.
            </summary>
            <param name="left">The left coordinate, 0 &lt;= left &lt; Width.</param>
            <param name="top">The top coordinate, 0 &lt;= top &lt;= Height.</param>
            <param name="width">The width of the rectangle to crop.</param>
            <param name="height">The height of the rectangle to crop.</param>
            <returns>
            A cropped version of this object.
            </returns>
        </member>
        <member name="M:Auki.Barcode.PlanarYUVLuminanceSource.renderThumbnail">
            <summary>
            Renders the cropped greyscale bitmap.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Auki.Barcode.PlanarYUVLuminanceSource.ThumbnailWidth">
            <summary>
            width of image from {@link #renderThumbnail()}
            </summary>
        </member>
        <member name="P:Auki.Barcode.PlanarYUVLuminanceSource.ThumbnailHeight">
            <summary>
            height of image from {@link #renderThumbnail()}
            </summary>
        </member>
        <member name="M:Auki.Barcode.PlanarYUVLuminanceSource.CreateLuminanceSource(System.Byte[],System.Int32,System.Int32)">
            <summary>
            creates a new instance
            </summary>
            <param name="newLuminances"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="T:Auki.Barcode.QrCode.Internal.ErrorCorrectionLevel">
            <summary>
            <p>See ISO 18004:2006, 6.5.1. This enum encapsulates the four error correction levels
            defined by the QR code standard.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.ErrorCorrectionLevel.L">
            <summary> L = ~7% correction</summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.ErrorCorrectionLevel.M">
            <summary> M = ~15% correction</summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.ErrorCorrectionLevel.Q">
            <summary> Q = ~25% correction</summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.ErrorCorrectionLevel.H">
            <summary> H = ~30% correction</summary>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.ErrorCorrectionLevel.Bits">
            <summary>
            Gets the bits.
            </summary>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.ErrorCorrectionLevel.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.ErrorCorrectionLevel.ordinal">
            <summary>
            Ordinals this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.ErrorCorrectionLevel.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.ErrorCorrectionLevel.forBits(System.Int32)">
            <summary>
            Fors the bits.
            </summary>
            <param name="bits">int containing the two bits encoding a QR Code's error correction level</param>
            <returns>
              <see cref="T:Auki.Barcode.QrCode.Internal.ErrorCorrectionLevel" /> representing the encoded error correction level
            </returns>
        </member>
        <member name="T:Auki.Barcode.QrCode.Internal.Mode">
            <summary>
            <p>See ISO 18004:2006, 6.4.1, Tables 2 and 3. This enum encapsulates the various modes in which
            data can be encoded to bits in the QR code standard.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.Mode.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:Auki.Barcode.QrCode.Internal.Mode.Names">
            <summary>
            enumeration for encoding modes
            </summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.Mode.Names.TERMINATOR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.Mode.Names.NUMERIC">
            <summary>
            numeric encoding
            </summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.Mode.Names.ALPHANUMERIC">
            <summary>
            alpha-numeric encoding
            </summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.Mode.Names.STRUCTURED_APPEND">
            <summary>
            structured append
            </summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.Mode.Names.BYTE">
            <summary>
            byte mode encoding
            </summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.Mode.Names.ECI">
            <summary>
            ECI segment
            </summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.Mode.Names.KANJI">
            <summary>
            Kanji mode
            </summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.Mode.Names.FNC1_FIRST_POSITION">
            <summary>
            FNC1 char, first position
            </summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.Mode.Names.FNC1_SECOND_POSITION">
            <summary>
            FNC1 char, second position
            </summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.Mode.Names.HANZI">
            <summary>
            Hanzi mode
            </summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.Mode.TERMINATOR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.Mode.NUMERIC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.Mode.ALPHANUMERIC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.Mode.STRUCTURED_APPEND">
            <summary>
            
            </summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.Mode.BYTE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.Mode.ECI">
            <summary>
            
            </summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.Mode.KANJI">
            <summary>
            
            </summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.Mode.FNC1_FIRST_POSITION">
            <summary>
            
            </summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.Mode.FNC1_SECOND_POSITION">
            <summary>
            
            </summary>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.Mode.HANZI">
            <summary>See GBT 18284-2000; "Hanzi" is a transliteration of this mode name.</summary>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.Mode.forBits(System.Int32)">
            <summary>
            Fors the bits.
            </summary>
            <param name="bits">four bits encoding a QR Code data mode</param>
            <returns>
              <see cref="T:Auki.Barcode.QrCode.Internal.Mode" /> encoded by these bits
            </returns>
            <exception cref="T:System.ArgumentException">if bits do not correspond to a known mode</exception>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.Mode.getCharacterCountBits(Auki.Barcode.QrCode.Internal.Version)">
            <param name="version">version in question
            </param>
            <returns> number of bits used, in this QR Code symbol {@link Version}, to encode the
            count of characters that will follow encoded in this {@link Mode}
            </returns>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.Mode.Bits">
            <summary>
            Gets the bits.
            </summary>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.Mode.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Auki.Barcode.QrCode.Internal.QRCodeDecoderMetaData">
            <summary>
            Meta-data container for QR Code decoding. Instances of this class may be used to convey information back to the
            decoding caller. Callers are expected to process this.
            </summary>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.QRCodeDecoderMetaData.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.QrCode.Internal.QRCodeDecoderMetaData" /> class.
            </summary>
            <param name="mirrored">if set to <c>true</c> [mirrored].</param>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.QRCodeDecoderMetaData.IsMirrored">
            <summary>
            true if the QR Code was mirrored. 
            </summary>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.QRCodeDecoderMetaData.applyMirroredCorrection(Auki.Barcode.ResultPoint[])">
            <summary>
            Apply the result points' order correction due to mirroring.
            </summary>
            <param name="points">Array of points to apply mirror correction to.</param>
        </member>
        <member name="T:Auki.Barcode.QrCode.Internal.Version">
            <summary>
            See ISO 18004:2006 Annex D
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.Version.VersionNumber">
            <summary>
            Gets the version number.
            </summary>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.Version.AlignmentPatternCenters">
            <summary>
            Gets the alignment pattern centers.
            </summary>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.Version.TotalCodewords">
            <summary>
            Gets the total codewords.
            </summary>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.Version.DimensionForVersion">
            <summary>
            Gets the dimension for version.
            </summary>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.Version.getECBlocksForLevel(Auki.Barcode.QrCode.Internal.ErrorCorrectionLevel)">
            <summary>
            Gets the EC blocks for level.
            </summary>
            <param name="ecLevel">The ec level.</param>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.Version.getProvisionalVersionForDimension(System.Int32)">
            <summary> <p>Deduces version information purely from QR Code dimensions.</p>
            
            </summary>
            <param name="dimension">dimension in modules
            </param>
            <returns><see cref="T:Auki.Barcode.QrCode.Internal.Version" /> for a QR Code of that dimension or null</returns>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.Version.getVersionForNumber(System.Int32)">
            <summary>
            Gets the version for number.
            </summary>
            <param name="versionNumber">The version number.</param>
            <returns></returns>
        </member>
        <member name="T:Auki.Barcode.QrCode.Internal.Version.ECBlocks">
            <summary> <p>Encapsulates a set of error-correction blocks in one symbol version. Most versions will
            use blocks of differing sizes within one version, so, this encapsulates the parameters for
            each set of blocks. It also holds the number of error-correction codewords per block since it
            will be the same across all blocks within one version.</p>
            </summary>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.Version.ECBlocks.ECCodewordsPerBlock">
            <summary>
            Gets the EC codewords per block.
            </summary>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.Version.ECBlocks.NumBlocks">
            <summary>
            Gets the num blocks.
            </summary>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.Version.ECBlocks.TotalECCodewords">
            <summary>
            Gets the total EC codewords.
            </summary>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.Version.ECBlocks.getECBlocks">
            <summary>
            Gets the EC blocks.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Auki.Barcode.QrCode.Internal.Version.ECB">
            <summary> <p>Encapsulates the parameters for one error-correction block in one symbol version.
            This includes the number of data codewords, and the number of times a block with these
            parameters is used consecutively in the QR code version's format.</p>
            </summary>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.Version.ECB.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.Version.ECB.DataCodewords">
            <summary>
            Gets the data codewords.
            </summary>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.Version.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Auki.Barcode.QrCode.Internal.AlignmentPattern">
            <summary> <p>Encapsulates an alignment pattern, which are the smaller square patterns found in
            all but the simplest QR Codes.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:Auki.Barcode.QrCode.Internal.FinderPattern">
            <summary>
            <p>Encapsulates a finder pattern, which are the three square patterns found in
            the corners of QR Codes. It also encapsulates a count of similar finder patterns,
            as a convenience to the finder's bookkeeping.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.FinderPattern.EstimatedModuleSize">
            <summary>
            Gets the size of the estimated module.
            </summary>
            <value>
            The size of the estimated module.
            </value>
        </member>
        <member name="T:Auki.Barcode.QrCode.Internal.FinderPatternInfo">
            <summary>
            <p>Encapsulates information about finder patterns in an image, including the location of
            the three finder patterns, and their estimated module size.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.FinderPatternInfo.#ctor(Auki.Barcode.QrCode.Internal.FinderPattern[])">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.QrCode.Internal.FinderPatternInfo" /> class.
            </summary>
            <param name="patternCenters">The pattern centers.</param>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.FinderPatternInfo.BottomLeft">
            <summary>
            Gets the bottom left.
            </summary>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.FinderPatternInfo.TopLeft">
            <summary>
            Gets the top left.
            </summary>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.FinderPatternInfo.TopRight">
            <summary>
            Gets the top right.
            </summary>
        </member>
        <member name="T:Auki.Barcode.QrCode.Internal.ByteMatrix">
            <summary>
            JAVAPORT: The original code was a 2D array of ints, but since it only ever gets assigned
            0, 1 and 2 I'm going to use less memory and go with bytes.
            </summary>
            <author>dswitkin@google.com (Daniel Switkin)</author>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.ByteMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.QrCode.Internal.ByteMatrix" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.ByteMatrix.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.ByteMatrix.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.ByteMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Int32" /> with the specified x.
            </summary>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.ByteMatrix.Array">
            <summary>
            an internal representation as bytes, in row-major order. array[y][x] represents point (x,y)
            </summary>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.ByteMatrix.set(System.Int32,System.Int32,System.Byte)">
            <summary>
            Sets the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.ByteMatrix.set(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.ByteMatrix.clear(System.Byte)">
            <summary>
            Clears the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.ByteMatrix.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Auki.Barcode.QrCode.Internal.Encoder">
            <summary>
            </summary>
            <author>satorux@google.com (Satoru Takabayashi) - creator</author>
            <author>dswitkin@google.com (Daniel Switkin) - ported from C++</author>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.Encoder.encode(System.String,Auki.Barcode.QrCode.Internal.ErrorCorrectionLevel)">
            <summary>
            Encode "bytes" with the error correction level "ecLevel". The encoding mode will be chosen
            internally by chooseMode(). On success, store the result in "qrCode".
            We recommend you to use QRCode.EC_LEVEL_L (the lowest level) for
            "getECLevel" since our primary use is to show QR code on desktop screens. We don't need very
            strong error correction for this purpose.
            Note that there is no way to encode bytes in MODE_KANJI. We might want to add EncodeWithMode()
            with which clients can specify the encoding mode. For now, we don't need the functionality.
            </summary>
            <param name="content">text to encode</param>
            <param name="ecLevel">error correction level to use</param>
            <returns><see cref="T:Auki.Barcode.QrCode.Internal.QRCode" /> representing the encoded QR code</returns>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.Encoder.encode(System.String,Auki.Barcode.QrCode.Internal.ErrorCorrectionLevel,System.Collections.Generic.IDictionary{Auki.Barcode.EncodeHintType,System.Object})">
            <summary>
            Encodes the specified content.
            </summary>
            <param name="content">The content.</param>
            <param name="ecLevel">The ec level.</param>
            <param name="hints">The hints.</param>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.Encoder.chooseMode(System.String)">
            <summary>
            Chooses the mode.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="T:Auki.Barcode.QrCode.Internal.MaskUtil">
            <summary>
            
            </summary>
            <author>Satoru Takabayashi</author>
            <author>Daniel Switkin</author>
            <author>Sean Owen</author>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.MaskUtil.applyMaskPenaltyRule1(Auki.Barcode.QrCode.Internal.ByteMatrix)">
            <summary>
            Apply mask penalty rule 1 and return the penalty. Find repetitive cells with the same color and
            give penalty to them. Example: 00000 or 11111.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.MaskUtil.applyMaskPenaltyRule2(Auki.Barcode.QrCode.Internal.ByteMatrix)">
            <summary>
            Apply mask penalty rule 2 and return the penalty. Find 2x2 blocks with the same color and give
            penalty to them. This is actually equivalent to the spec's rule, which is to find MxN blocks and give a
            penalty proportional to (M-1)x(N-1), because this is the number of 2x2 blocks inside such a block.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.MaskUtil.applyMaskPenaltyRule3(Auki.Barcode.QrCode.Internal.ByteMatrix)">
            <summary>
            Apply mask penalty rule 3 and return the penalty. Find consecutive cells of 00001011101 or
            10111010000, and give penalty to them.  If we find patterns like 000010111010000, we give
            penalties twice (i.e. 40 * 2).
            </summary>
            <param name="matrix">The matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.MaskUtil.applyMaskPenaltyRule4(Auki.Barcode.QrCode.Internal.ByteMatrix)">
            <summary>
            Apply mask penalty rule 4 and return the penalty. Calculate the ratio of dark cells and give
            penalty if the ratio is far from 50%. It gives 10 penalty for 5% distance.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.MaskUtil.getDataMaskBit(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return the mask bit for "getMaskPattern" at "x" and "y". See 8.8 of JISX0510:2004 for mask
            pattern conditions.
            </summary>
            <param name="maskPattern">The mask pattern.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="T:Auki.Barcode.QrCode.Internal.MatrixUtil">
            <summary>
            
            </summary>
            <author>
            satorux@google.com (Satoru Takabayashi) - creator
            </author>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.MatrixUtil.clearMatrix(Auki.Barcode.QrCode.Internal.ByteMatrix)">
             <summary>
             Set all cells to 2.  2 means that the cell is empty (not set yet).
            
             JAVAPORT: We shouldn't need to do this at all. The code should be rewritten to begin encoding
             with the ByteMatrix initialized all to zero.
             </summary>
             <param name="matrix">The matrix.</param>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.MatrixUtil.buildMatrix(Auki.Barcode.Common.BitArray,Auki.Barcode.QrCode.Internal.ErrorCorrectionLevel,Auki.Barcode.QrCode.Internal.Version,System.Int32,Auki.Barcode.QrCode.Internal.ByteMatrix)">
            <summary>
            Build 2D matrix of QR Code from "dataBits" with "ecLevel", "version" and "getMaskPattern". On
            success, store the result in "matrix" and return true.
            </summary>
            <param name="dataBits">The data bits.</param>
            <param name="ecLevel">The ec level.</param>
            <param name="version">The version.</param>
            <param name="maskPattern">The mask pattern.</param>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.MatrixUtil.embedBasicPatterns(Auki.Barcode.QrCode.Internal.Version,Auki.Barcode.QrCode.Internal.ByteMatrix)">
            <summary>
            Embed basic patterns. On success, modify the matrix and return true.
            The basic patterns are:
            - Position detection patterns
            - Timing patterns
            - Dark dot at the left bottom corner
            - Position adjustment patterns, if need be
            </summary>
            <param name="version">The version.</param>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.MatrixUtil.embedTypeInfo(Auki.Barcode.QrCode.Internal.ErrorCorrectionLevel,System.Int32,Auki.Barcode.QrCode.Internal.ByteMatrix)">
            <summary>
            Embed type information. On success, modify the matrix.
            </summary>
            <param name="ecLevel">The ec level.</param>
            <param name="maskPattern">The mask pattern.</param>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.MatrixUtil.maybeEmbedVersionInfo(Auki.Barcode.QrCode.Internal.Version,Auki.Barcode.QrCode.Internal.ByteMatrix)">
            <summary>
            Embed version information if need be. On success, modify the matrix and return true.
            See 8.10 of JISX0510:2004 (p.47) for how to embed version information.
            </summary>
            <param name="version">The version.</param>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.MatrixUtil.embedDataBits(Auki.Barcode.Common.BitArray,System.Int32,Auki.Barcode.QrCode.Internal.ByteMatrix)">
            <summary>
            Embed "dataBits" using "getMaskPattern". On success, modify the matrix and return true.
            For debugging purposes, it skips masking process if "getMaskPattern" is -1.
            See 8.7 of JISX0510:2004 (p.38) for how to embed data bits.
            </summary>
            <param name="dataBits">The data bits.</param>
            <param name="maskPattern">The mask pattern.</param>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.MatrixUtil.findMSBSet(System.Int32)">
            <summary>
            Return the position of the most significant bit set (to one) in the "value". The most
            significant bit is position 32. If there is no bit set, return 0. Examples:
            - findMSBSet(0) =&gt; 0
            - findMSBSet(1) =&gt; 1
            - findMSBSet(255) =&gt; 8
            </summary>
            <param name="value_Renamed">The value_ renamed.</param>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.MatrixUtil.calculateBCHCode(System.Int32,System.Int32)">
             <summary>
             Calculate BCH (Bose-Chaudhuri-Hocquenghem) code for "value" using polynomial "poly". The BCH
             code is used for encoding type information and version information.
             Example: Calculation of version information of 7.
             f(x) is created from 7.
               - 7 = 000111 in 6 bits
               - f(x) = x^2 + x^2 + x^1
             g(x) is given by the standard (p. 67)
               - g(x) = x^12 + x^11 + x^10 + x^9 + x^8 + x^5 + x^2 + 1
             Multiply f(x) by x^(18 - 6)
               - f'(x) = f(x) * x^(18 - 6)
               - f'(x) = x^14 + x^13 + x^12
             Calculate the remainder of f'(x) / g(x)
                     x^2
                     __________________________________________________
               g(x) )x^14 + x^13 + x^12
                     x^14 + x^13 + x^12 + x^11 + x^10 + x^7 + x^4 + x^2
                     --------------------------------------------------
                                          x^11 + x^10 + x^7 + x^4 + x^2
            
             The remainder is x^11 + x^10 + x^7 + x^4 + x^2
             Encode it in binary: 110010010100
             The return value is 0xc94 (1100 1001 0100)
            
             Since all coefficients in the polynomials are 1 or 0, we can do the calculation by bit
             operations. We don't care if coefficients are positive or negative.
             </summary>
             <param name="value">The value.</param>
             <param name="poly">The poly.</param>
             <returns></returns>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.MatrixUtil.makeTypeInfoBits(Auki.Barcode.QrCode.Internal.ErrorCorrectionLevel,System.Int32,Auki.Barcode.Common.BitArray)">
            <summary>
            Make bit vector of type information. On success, store the result in "bits" and return true.
            Encode error correction level and mask pattern. See 8.9 of
            JISX0510:2004 (p.45) for details.
            </summary>
            <param name="ecLevel">The ec level.</param>
            <param name="maskPattern">The mask pattern.</param>
            <param name="bits">The bits.</param>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.MatrixUtil.makeVersionInfoBits(Auki.Barcode.QrCode.Internal.Version,Auki.Barcode.Common.BitArray)">
            <summary>
            Make bit vector of version information. On success, store the result in "bits" and return true.
            See 8.10 of JISX0510:2004 (p.45) for details.
            </summary>
            <param name="version">The version.</param>
            <param name="bits">The bits.</param>
        </member>
        <member name="T:Auki.Barcode.QrCode.Internal.QRCode">
            <author>satorux@google.com (Satoru Takabayashi) - creator</author>
            <author>dswitkin@google.com (Daniel Switkin) - ported from C++</author>
        </member>
        <member name="F:Auki.Barcode.QrCode.Internal.QRCode.NUM_MASK_PATTERNS">
            <summary>
            
            </summary>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.QRCode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.QrCode.Internal.QRCode" /> class.
            </summary>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.QRCode.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>
            The mode.
            </value>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.QRCode.ECLevel">
            <summary>
            Gets or sets the EC level.
            </summary>
            <value>
            The EC level.
            </value>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.QRCode.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.QRCode.MaskPattern">
            <summary>
            Gets or sets the mask pattern.
            </summary>
            <value>
            The mask pattern.
            </value>
        </member>
        <member name="P:Auki.Barcode.QrCode.Internal.QRCode.Matrix">
            <summary>
            Gets or sets the matrix.
            </summary>
            <value>
            The matrix.
            </value>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.QRCode.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Auki.Barcode.QrCode.Internal.QRCode.isValidMaskPattern(System.Int32)">
            <summary>
            Check if "mask_pattern" is valid.
            </summary>
            <param name="maskPattern">The mask pattern.</param>
            <returns>
              <c>true</c> if [is valid mask pattern] [the specified mask pattern]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Auki.Barcode.QrCode.QrCodeEncodingOptions">
            <summary>
            The class holds the available options for the QrCodeWriter
            </summary>
        </member>
        <member name="P:Auki.Barcode.QrCode.QrCodeEncodingOptions.ErrorCorrection">
            <summary>
            Specifies what degree of error correction to use, for example in QR Codes.
            Type depends on the encoder. For example for QR codes it's type
            <see cref="T:Auki.Barcode.QrCode.Internal.ErrorCorrectionLevel" />.
            </summary>
        </member>
        <member name="P:Auki.Barcode.QrCode.QrCodeEncodingOptions.CharacterSet">
            <summary>
            Specifies what character encoding to use where applicable (type <see cref="T:System.String" />)
            </summary>
        </member>
        <member name="P:Auki.Barcode.QrCode.QrCodeEncodingOptions.DisableECI">
            <summary>
            Explicitly disables ECI segment when generating QR Code
            That is against the specification of QR Code but some
            readers have problems if the charset is switched from
            ISO-8859-1 (default) to UTF-8 with the necessary ECI segment.
            If you set the property to true you can use UTF-8 encoding
            and the ECI segment is omitted.
            </summary>
        </member>
        <member name="P:Auki.Barcode.QrCode.QrCodeEncodingOptions.QrVersion">
            <summary>
            Specifies the exact version of QR code to be encoded. An integer, range 1 to 40. If the data specified
            cannot fit within the required version, a WriterException will be thrown.
            </summary>
        </member>
        <member name="T:Auki.Barcode.ReaderException">
            <summary>
            The general exception class throw when something goes wrong during decoding of a barcode.
            This includes, but is not limited to, failing checksums / error correction algorithms, being
            unable to locate finder timing patterns, and so on.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:Auki.Barcode.ReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.ReaderException" /> class.
            </summary>
        </member>
        <member name="M:Auki.Barcode.ReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.ReaderException" /> class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Auki.Barcode.ReaderException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.ReaderException" /> class.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Auki.Barcode.ReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.ReaderException" /> class.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="message"></param>
        </member>
        <member name="T:Auki.Barcode.Rendering.PixelData">
            <summary>
            represents the generated code as a byte array with pixel data (4 byte per pixel, BGRA)
            </summary>
            <summary>
            represents the generated code as a byte array with pixel data (4 byte per pixel, BGRA)
            </summary>
        </member>
        <member name="M:Auki.Barcode.Rendering.PixelData.ToColor32">
            <summary>
            converts the pixel data to a bitmap object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Auki.Barcode.Rendering.PixelData.Pixels">
            <summary>
            the generated code as byte array of BGRA pixels
            </summary>
        </member>
        <member name="P:Auki.Barcode.Rendering.PixelData.Width">
            <summary>
            the width of the image
            </summary>
        </member>
        <member name="P:Auki.Barcode.Rendering.PixelData.Height">
            <summary>
            the height of the image
            </summary>
        </member>
        <member name="T:Auki.Barcode.Result">
            <summary>
            Encapsulates the result of decoding a barcode within an image.
            </summary>
        </member>
        <member name="P:Auki.Barcode.Result.Text">
            <returns>raw text encoded by the barcode, if applicable, otherwise <code>null</code></returns>
        </member>
        <member name="P:Auki.Barcode.Result.RawBytes">
            <returns>raw bytes encoded by the barcode, if applicable, otherwise <code>null</code></returns>
        </member>
        <member name="P:Auki.Barcode.Result.ResultPoints">
            <returns>
            points related to the barcode in the image. These are typically points
            identifying finder patterns or the corners of the barcode. The exact meaning is
            specific to the type of barcode that was decoded.
            </returns>
        </member>
        <member name="P:Auki.Barcode.Result.BarcodeFormat">
            <returns>{@link BarcodeFormat} representing the format of the barcode that was decoded</returns>
        </member>
        <member name="P:Auki.Barcode.Result.ResultMetadata">
            <returns>
            {@link Hashtable} mapping {@link ResultMetadataType} keys to values. May be
            <code>null</code>. This contains optional metadata about what was detected about the barcode,
            like orientation.
            </returns>
        </member>
        <member name="P:Auki.Barcode.Result.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:Auki.Barcode.Result.NumBits">
            <summary>
            how many bits of <see cref="P:Auki.Barcode.Result.RawBytes" /> are valid; typically 8 times its length
            </summary>
        </member>
        <member name="M:Auki.Barcode.Result.#ctor(System.String,System.Byte[],Auki.Barcode.ResultPoint[],Auki.Barcode.BarcodeFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.Result" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="rawBytes">The raw bytes.</param>
            <param name="resultPoints">The result points.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:Auki.Barcode.Result.#ctor(System.String,System.Byte[],System.Int32,Auki.Barcode.ResultPoint[],Auki.Barcode.BarcodeFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.Result" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="rawBytes">The raw bytes.</param>
            <param name="numBits"></param>
            <param name="resultPoints">The result points.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:Auki.Barcode.Result.#ctor(System.String,System.Byte[],Auki.Barcode.ResultPoint[],Auki.Barcode.BarcodeFormat,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.Result" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="rawBytes">The raw bytes.</param>
            <param name="resultPoints">The result points.</param>
            <param name="format">The format.</param>
            <param name="timestamp">The timestamp.</param>
        </member>
        <member name="M:Auki.Barcode.Result.#ctor(System.String,System.Byte[],System.Int32,Auki.Barcode.ResultPoint[],Auki.Barcode.BarcodeFormat,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.Result" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="rawBytes">The raw bytes.</param>
            <param name="numBits"></param>
            <param name="resultPoints">The result points.</param>
            <param name="format">The format.</param>
            <param name="timestamp">The timestamp.</param>
        </member>
        <member name="M:Auki.Barcode.Result.putMetadata(Auki.Barcode.ResultMetadataType,System.Object)">
            <summary>
            Adds one metadata to the result
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Auki.Barcode.Result.putAllMetadata(System.Collections.Generic.IDictionary{Auki.Barcode.ResultMetadataType,System.Object})">
            <summary>
            Adds a list of metadata to the result
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Auki.Barcode.Result.addResultPoints(Auki.Barcode.ResultPoint[])">
            <summary>
            Adds the result points.
            </summary>
            <param name="newPoints">The new points.</param>
        </member>
        <member name="M:Auki.Barcode.Result.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Auki.Barcode.ResultMetadataType">
            <summary>
            Represents some type of metadata about the result of the decoding that the decoder
            wishes to communicate back to the caller.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="F:Auki.Barcode.ResultMetadataType.OTHER">
            <summary>
            Unspecified, application-specific metadata. Maps to an unspecified {@link Object}.
            </summary>
        </member>
        <member name="F:Auki.Barcode.ResultMetadataType.ORIENTATION">
            <summary>
            Denotes the likely approximate orientation of the barcode in the image. This value
            is given as degrees rotated clockwise from the normal, upright orientation.
            For example a 1D barcode which was found by reading top-to-bottom would be
            said to have orientation "90". This key maps to an {@link Integer} whose
            value is in the range [0,360).
            </summary>
        </member>
        <member name="F:Auki.Barcode.ResultMetadataType.BYTE_SEGMENTS">
            <summary>
            <p>2D barcode formats typically encode text, but allow for a sort of 'byte mode'
            which is sometimes used to encode binary data. While {@link Result} makes available
            the complete raw bytes in the barcode for these formats, it does not offer the bytes
            from the byte segments alone.</p>
            <p>This maps to a {@link java.util.List} of byte arrays corresponding to the
            raw bytes in the byte segments in the barcode, in order.</p>
            </summary>
        </member>
        <member name="F:Auki.Barcode.ResultMetadataType.ERROR_CORRECTION_LEVEL">
            <summary>
            Error correction level used, if applicable. The value type depends on the
            format, but is typically a String.
            </summary>
        </member>
        <member name="F:Auki.Barcode.ResultMetadataType.ISSUE_NUMBER">
            <summary>
            For some periodicals, indicates the issue number as an {@link Integer}.
            </summary>
        </member>
        <member name="F:Auki.Barcode.ResultMetadataType.SUGGESTED_PRICE">
            <summary>
            For some products, indicates the suggested retail price in the barcode as a
            formatted {@link String}.
            </summary>
        </member>
        <member name="F:Auki.Barcode.ResultMetadataType.POSSIBLE_COUNTRY">
            <summary>
            For some products, the possible country of manufacture as a {@link String} denoting the
            ISO country code. Some map to multiple possible countries, like "US/CA".
            </summary>
        </member>
        <member name="F:Auki.Barcode.ResultMetadataType.UPC_EAN_EXTENSION">
            <summary>
            For some products, the extension text
            </summary>
        </member>
        <member name="F:Auki.Barcode.ResultMetadataType.STRUCTURED_APPEND_SEQUENCE">
            <summary>
            If the code format supports structured append and
            the current scanned code is part of one then the
            sequence number is given with it.
            </summary>
        </member>
        <member name="F:Auki.Barcode.ResultMetadataType.STRUCTURED_APPEND_PARITY">
            <summary>
            If the code format supports structured append and
            the current scanned code is part of one then the
            parity is given with it.
            </summary>
        </member>
        <member name="F:Auki.Barcode.ResultMetadataType.PDF417_EXTRA_METADATA">
            <summary>
            PDF417-specific metadata
            </summary>
        </member>
        <member name="F:Auki.Barcode.ResultMetadataType.AZTEC_EXTRA_METADATA">
            <summary>
            Aztec-specific metadata
            </summary>
        </member>
        <member name="T:Auki.Barcode.ResultPoint">
            <summary>
            Encapsulates a point of interest in an image containing a barcode. Typically, this
            would be the location of a finder pattern or the corner of the barcode, for example.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:Auki.Barcode.ResultPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.ResultPoint" /> class.
            </summary>
        </member>
        <member name="M:Auki.Barcode.ResultPoint.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.ResultPoint" /> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="P:Auki.Barcode.ResultPoint.X">
            <summary>
            Gets the X.
            </summary>
        </member>
        <member name="P:Auki.Barcode.ResultPoint.Y">
            <summary>
            Gets the Y.
            </summary>
        </member>
        <member name="M:Auki.Barcode.ResultPoint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Auki.Barcode.ResultPoint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Auki.Barcode.ResultPoint.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Auki.Barcode.ResultPoint.orderBestPatterns(Auki.Barcode.ResultPoint[])">
            <summary>
            Orders an array of three ResultPoints in an order [A,B,C] such that AB is less than AC and
            BC is less than AC and the angle between BC and BA is less than 180 degrees.
            </summary>
            <param name="patterns">array of three <see cref="T:Auki.Barcode.ResultPoint" /> to order</param>
        </member>
        <member name="M:Auki.Barcode.ResultPoint.distance(Auki.Barcode.ResultPoint,Auki.Barcode.ResultPoint)">
            <summary>
            calculates the distance between two points
            </summary>
            <param name="pattern1">first pattern</param>
            <param name="pattern2">second pattern</param>
            <returns>
            distance between two points
            </returns>
        </member>
        <member name="T:Auki.Barcode.ResultPointCallback">
            <summary> Callback which is invoked when a possible result point (significant
            point in the barcode image such as a corner) is found.
            
            </summary>
            <seealso cref="F:Auki.Barcode.DecodeHintType.NEED_RESULT_POINT_CALLBACK">
            </seealso>
        </member>
        <member name="T:Auki.Barcode.RGBLuminanceSource">
            <summary>
            Luminance source class which support different formats of images.
            </summary>
        </member>
        <member name="T:Auki.Barcode.RGBLuminanceSource.BitmapFormat">
            <summary>
            enumeration of supported bitmap format which the RGBLuminanceSource can process
            </summary>
        </member>
        <member name="F:Auki.Barcode.RGBLuminanceSource.BitmapFormat.Unknown">
            <summary>
            format of the byte[] isn't known. RGBLuminanceSource tries to determine the best possible value
            </summary>
        </member>
        <member name="F:Auki.Barcode.RGBLuminanceSource.BitmapFormat.Gray8">
            <summary>
            grayscale array, the byte array is a luminance array with 1 byte per pixel
            </summary>
        </member>
        <member name="F:Auki.Barcode.RGBLuminanceSource.BitmapFormat.Gray16">
            <summary>
            grayscale array, the byte array is a luminance array with 2 bytes per pixel
            </summary>
        </member>
        <member name="F:Auki.Barcode.RGBLuminanceSource.BitmapFormat.RGB24">
            <summary>
            3 bytes per pixel with the channels red, green and blue
            </summary>
        </member>
        <member name="F:Auki.Barcode.RGBLuminanceSource.BitmapFormat.RGB32">
            <summary>
            4 bytes per pixel with the channels red, green and blue
            </summary>
        </member>
        <member name="F:Auki.Barcode.RGBLuminanceSource.BitmapFormat.ARGB32">
            <summary>
            4 bytes per pixel with the channels alpha, red, green and blue
            </summary>
        </member>
        <member name="F:Auki.Barcode.RGBLuminanceSource.BitmapFormat.BGR24">
            <summary>
            3 bytes per pixel with the channels blue, green and red
            </summary>
        </member>
        <member name="F:Auki.Barcode.RGBLuminanceSource.BitmapFormat.BGR32">
            <summary>
            4 bytes per pixel with the channels blue, green and red
            </summary>
        </member>
        <member name="F:Auki.Barcode.RGBLuminanceSource.BitmapFormat.BGRA32">
            <summary>
            4 bytes per pixel with the channels blue, green, red and alpha
            </summary>
        </member>
        <member name="F:Auki.Barcode.RGBLuminanceSource.BitmapFormat.RGB565">
            <summary>
            2 bytes per pixel, 5 bit red, 6 bits green and 5 bits blue
            </summary>
        </member>
        <member name="F:Auki.Barcode.RGBLuminanceSource.BitmapFormat.RGBA32">
            <summary>
            4 bytes per pixel with the channels red, green, blue and alpha
            </summary>
        </member>
        <member name="F:Auki.Barcode.RGBLuminanceSource.BitmapFormat.UYVY">
            <summary>
            4 bytes for two pixels, UYVY formatted
            </summary>
        </member>
        <member name="F:Auki.Barcode.RGBLuminanceSource.BitmapFormat.YUYV">
            <summary>
            4 bytes for two pixels, YUYV formatted
            </summary>
        </member>
        <member name="M:Auki.Barcode.RGBLuminanceSource.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.RGBLuminanceSource" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Auki.Barcode.RGBLuminanceSource.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.RGBLuminanceSource" /> class.
            It supports a byte array with 3 bytes per pixel (RGB24).
            </summary>
            <param name="rgbRawBytes">The RGB raw bytes.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Auki.Barcode.RGBLuminanceSource.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.RGBLuminanceSource" /> class.
            It supports a byte array with 1 byte per pixel (Gray8).
            That means the whole array consists of the luminance values (grayscale).
            </summary>
            <param name="luminanceArray">The luminance array.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="is8Bit">if set to <c>true</c> [is8 bit].</param>
        </member>
        <member name="M:Auki.Barcode.RGBLuminanceSource.#ctor(System.Byte[],System.Int32,System.Int32,Auki.Barcode.RGBLuminanceSource.BitmapFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.RGBLuminanceSource" /> class.
            It supports a byte array with 3 bytes per pixel (RGB24).
            </summary>
            <param name="rgbRawBytes">The RGB raw bytes.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="bitmapFormat">The bitmap format.</param>
        </member>
        <member name="M:Auki.Barcode.RGBLuminanceSource.CreateLuminanceSource(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Should create a new luminance source with the right class type.
            The method is used in methods crop and rotate.
            </summary>
            <param name="newLuminances">The new luminances.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.RGBLuminanceSource.CalculateLuminance(System.Byte[],Auki.Barcode.RGBLuminanceSource.BitmapFormat)">
            <summary>
            calculates the luminance values for the given byte array and bitmap format
            </summary>
            <param name="rgbRawBytes"></param>
            <param name="bitmapFormat"></param>
        </member>
        <member name="T:Auki.Barcode.SupportClass">
            <summary>
            Contains conversion support elements such as classes, interfaces and static methods.
            </summary>
        </member>
        <member name="M:Auki.Barcode.SupportClass.GetCharsFromString(System.String,System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Copies an array of chars obtained from a String into a specified array of chars
            </summary>
            <param name="sourceString">The String to get the chars from</param>
            <param name="sourceStart">Position of the String to start getting the chars</param>
            <param name="sourceEnd">Position of the String to end getting the chars</param>
            <param name="destinationArray">Array to return the chars</param>
            <param name="destinationStart">Position of the destination array of chars to start storing the chars</param>
            <returns>An array of chars</returns>
        </member>
        <member name="M:Auki.Barcode.SupportClass.SetCapacity``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Sets the capacity for the specified List
            </summary>
            <param name="vector">The List which capacity will be set</param>
            <param name="newCapacity">The new capacity value</param>
        </member>
        <member name="M:Auki.Barcode.SupportClass.toStringArray(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Converts a string-Collection to an array
            </summary>
            <param name="strings">The strings.</param>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.SupportClass.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Joins all elements to one string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator">The separator.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.SupportClass.Fill``1(``0[],``0)">
            <summary>
            Fills the specified array.
            (can't use extension method because of .Net 2.0 support)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Auki.Barcode.SupportClass.Fill``1(``0[],System.Int32,System.Int32,``0)">
            <summary>
            Fills the specified array.
            (can't use extension method because of .Net 2.0 support)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Auki.Barcode.SupportClass.ToBinaryString(System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.SupportClass.bitCount(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Auki.Barcode.SupportClass.GetValue``1(System.Collections.Generic.IDictionary{Auki.Barcode.DecodeHintType,System.Object},Auki.Barcode.DecodeHintType,``0)">
            <summary>
            Savely gets the value of a decoding hint
            if hints is null the default is returned
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hints">The hints.</param>
            <param name="hintType">Type of the hint.</param>
            <param name="default">The @default.</param>
            <returns></returns>
        </member>
        <member name="T:Auki.Barcode.Color32LuminanceSource">
            <summary>
            Calculates the luminance values based upon the Color32 structure
            </summary>
        </member>
        <member name="M:Auki.Barcode.Color32LuminanceSource.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.Color32LuminanceSource" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Auki.Barcode.Color32LuminanceSource.#ctor(UnityEngine.Color32[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.Color32LuminanceSource" /> class.
            </summary>
            <param name="color32s">The color32s.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Auki.Barcode.Color32LuminanceSource.SetPixels(UnityEngine.Color32[])">
            <summary>
            Sets the pixels.
            </summary>
            <param name="color32s">The color32s.</param>
        </member>
        <member name="M:Auki.Barcode.Color32LuminanceSource.CreateLuminanceSource(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Should create a new luminance source with the right class type.
            The method is used in methods crop and rotate.
            </summary>
            <param name="newLuminances">The new luminances.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="T:Auki.Barcode.WriterException">
            <summary>
            A base class which covers the range of exceptions which may occur when encoding a barcode using
            the Writer framework.
            </summary>
            <author>dswitkin@google.com (Daniel Switkin)</author>
        </member>
        <member name="M:Auki.Barcode.WriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.WriterException" /> class.
            </summary>
        </member>
        <member name="M:Auki.Barcode.WriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.WriterException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Auki.Barcode.WriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Auki.Barcode.WriterException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerExc">The inner exc.</param>
        </member>
        <member name="T:UnityEngine.Mathd">
            <summary>
            A struct that provides mathematical constants and functions using double-precision (double) values.
            </summary>
        </member>
        <member name="F:UnityEngine.Mathd.PI">
            <summary>
            Represents the mathematical constant π (pi).
            </summary>
        </member>
        <member name="F:UnityEngine.Mathd.Infinity">
            <summary>
            Represents positive infinity (∞).
            </summary>
        </member>
        <member name="F:UnityEngine.Mathd.NegativeInfinity">
            <summary>
            Represents negative infinity (-∞).
            </summary>
        </member>
        <member name="F:UnityEngine.Mathd.Deg2Rad">
            <summary>
            Conversion factor for degrees to radians.
            </summary>
        </member>
        <member name="F:UnityEngine.Mathd.Rad2Deg">
            <summary>
            Conversion factor for radians to degrees.
            </summary>
        </member>
        <member name="F:UnityEngine.Mathd.Epsilon">
            <summary>
            Represents the smallest positive double-precision floating-point value greater than zero.
            </summary>
        </member>
        <member name="M:UnityEngine.Mathd.Sin(System.Double)">
            <summary>
            Returns the sine of the specified angle in radians.
            </summary>
            <param name="d">An angle in radians.</param>
            <returns>The sine of the specified angle.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Cos(System.Double)">
            <summary>
            Returns the cosine of the specified angle in radians.
            </summary>
            <param name="d">An angle in radians.</param>
            <returns>The cosine of the specified angle.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Tan(System.Double)">
            <summary>
            Returns the tangent of the specified angle in radians.
            </summary>
            <param name="d">An angle in radians.</param>
            <returns>The tangent of the specified angle.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Asin(System.Double)">
            <summary>
            Returns the arcsine of the specified angle in radians.
            </summary>
            <param name="d">An angle in radians.</param>
            <returns>The arcsine of the specified angle.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Acos(System.Double)">
            <summary>
            Returns the arccosine of the specified angle in radians.
            </summary>
            <param name="d">An angle in radians.</param>
            <returns>The arccosine of the specified angle.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Atan(System.Double)">
            <summary>
            Returns the arctangent of the specified angle in radians.
            </summary>
            <param name="d">An angle in radians.</param>
            <returns>The arctangent of the specified angle.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Atan2(System.Double,System.Double)">
            <summary>
            Returns the arctangent of the quotient of two specified numbers.
            </summary>
            <param name="y">The y-coordinate of a point.</param>
            <param name="x">The x-coordinate of a point.</param>
            <returns>The arctangent of y / x in radians.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Sqrt(System.Double)">
            <summary>
            Returns the square root of a specified number.
            </summary>
            <param name="d">A number.</param>
            <returns>The positive square root of the specified number.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Abs(System.Double)">
            <summary>
            Returns the absolute value of a specified number.
            </summary>
            <param name="d">A number.</param>
            <returns>The absolute value of the specified number.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Abs(System.Int32)">
            <summary>
            Returns the absolute value of a specified 32-bit signed integer.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The absolute value of value.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Min(System.Double,System.Double)">
            <summary>
            Returns the smaller of two specified numbers.
            </summary>
            <param name="a">The first of two double-precision floating-point numbers to compare.</param>
            <param name="b">The second of two double-precision floating-point numbers to compare.</param>
            <returns>The smaller of a or b.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Min(System.Double[])">
            <summary>
            Returns the smaller of two or more double-precision floating-point numbers.
            </summary>
            <param name="values">An array of double-precision floating-point numbers to compare.</param>
            <returns>The smallest of the values in the array.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Min(System.Int32,System.Int32)">
            <summary>
            Returns the smaller of two specified 32-bit signed integers.
            </summary>
            <param name="a">The first of two 32-bit signed integers to compare.</param>
            <param name="b">The second of two 32-bit signed integers to compare.</param>
            <returns>The smaller of a or b.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Min(System.Int32[])">
            <summary>
            Returns the smaller of two or more 32-bit signed integers.
            </summary>
            <param name="values">An array of 32-bit signed integers to compare.</param>
            <returns>The smallest of the values in the array.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Max(System.Double,System.Double)">
            <summary>
            Returns the larger of two specified double-precision floating-point numbers.
            </summary>
            <param name="a">The first of two double-precision floating-point numbers to compare.</param>
            <param name="b">The second of two double-precision floating-point numbers to compare.</param>
            <returns>The larger of a or b.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Max(System.Double[])">
            <summary>
            Returns the larger of two or more double-precision floating-point numbers.
            </summary>
            <param name="values">An array of double-precision floating-point numbers to compare.</param>
            <returns>The largest of the values in the array.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Max(System.Int32,System.Int32)">
            <summary>
            Returns the larger of two specified 32-bit signed integers.
            </summary>
            <param name="a">The first of two 32-bit signed integers to compare.</param>
            <param name="b">The second of two 32-bit signed integers to compare.</param>
            <returns>The larger of a or b.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Max(System.Int32[])">
            <summary>
            Returns the larger of two or more 32-bit signed integers.
            </summary>
            <param name="values">An array of 32-bit signed integers to compare.</param>
            <returns>The largest of the values in the array.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Pow(System.Double,System.Double)">
            <summary>
            Returns a specified number raised to the power of another specified number.
            </summary>
            <param name="d">A double-precision floating-point number to be raised to a power.</param>
            <param name="p">A double-precision floating-point number that specifies a power.</param>
            <returns>The number d raised to the power p.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Exp(System.Double)">
            <summary>
            Returns e raised to the specified power.
            </summary>
            <param name="power">A number specifying the power.</param>
            <returns>The number e raised to the power power.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Log(System.Double)">
            <summary>
            Returns the natural logarithm of a specified number.
            </summary>
            <param name="d">A number.</param>
            <returns>The natural logarithm of d.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Log(System.Double,System.Double)">
            <summary>
            Returns the logarithm of a specified number in a specified base.
            </summary>
            <param name="d">A number.</param>
            <param name="p">The base of the logarithm.</param>
            <returns>The logarithm of d in base p.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Log10(System.Double)">
            <summary>
            Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="d">A number.</param>
            <returns>The base 10 logarithm of d.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Ceil(System.Double)">
            <summary>
            Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number.
            </summary>
            <param name="d">A number.</param>
            <returns>The smallest integral value that is greater than or equal to d.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Floor(System.Double)">
            <summary>
            Returns the largest integer less than or equal to the specified double-precision floating-point number.
            </summary>
            <param name="d">A number.</param>
            <returns>The largest integer less than or equal to d.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Round(System.Double)">
            <summary>
            Rounds a double-precision floating-point value to the nearest integral value.
            </summary>
            <param name="d">A number.</param>
            <returns>The integral value nearest to d. If d is halfway between two integers, one of those integers is returned.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.CeilToInt(System.Double)">
            <summary>
            Returns the smallest integral value greater than or equal to the specified double-precision floating-point number.
            </summary>
            <param name="d">A number.</param>
            <returns>The smallest integral value that is greater than or equal to d.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.FloorToInt(System.Double)">
            <summary>
            Returns the largest integer less than or equal to the specified double-precision floating-point number.
            </summary>
            <param name="d">A number.</param>
            <returns>The largest integer less than or equal to d.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.RoundToInt(System.Double)">
            <summary>
            Rounds a double-precision floating-point value to the nearest integer.
            </summary>
            <param name="d">A number.</param>
            <returns>The integer nearest to d. If d is halfway between two integers, the even integer is returned.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Sign(System.Double)">
            <summary>
            Returns a value indicating the sign of a double-precision floating-point number.
            </summary>
            <param name="d">A signed number.</param>
            <returns>
            -1 if d is less than zero.
            0 if d is zero.
            1 if d is greater than zero.
            </returns>
        </member>
        <member name="M:UnityEngine.Mathd.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. If value is less than min, min will be returned.</param>
            <param name="max">The maximum value. If value is greater than max, max will be returned.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. If value is less than min, min will be returned.</param>
            <param name="max">The maximum value. If value is greater than max, max will be returned.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Clamp01(System.Double)">
            <summary>
            Clamps a value between 0 and 1.
            </summary>
            <param name="value">The value to clamp.</param>
            <returns>The clamped value between 0 and 1.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Linearly interpolates between two values.
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="t">The interpolation factor. Value is clamped between 0 and 1.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.LerpAngle(System.Double,System.Double,System.Double)">
            <summary>
            Linearly interpolates between two angles.
            </summary>
            <param name="a">The start angle in degrees.</param>
            <param name="b">The end angle in degrees.</param>
            <param name="t">The interpolation factor. Value is clamped between 0 and 1.</param>
            <returns>The interpolated angle in degrees.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.MoveTowards(System.Double,System.Double,System.Double)">
            <summary>
            Moves a value towards a target with a maximum step.
            </summary>
            <param name="current">The current value.</param>
            <param name="target">The target value to move towards.</param>
            <param name="maxDelta">The maximum step to take towards the target.</param>
            <returns>The new value moved towards the target.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.MoveTowardsAngle(System.Double,System.Double,System.Double)">
            <summary>
            Moves an angle towards a target angle with a maximum step.
            </summary>
            <param name="current">The current angle in degrees.</param>
            <param name="target">The target angle in degrees to move towards.</param>
            <param name="maxDelta">The maximum step to take towards the target.</param>
            <returns>The new angle in degrees moved towards the target angle.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.SmoothStep(System.Double,System.Double,System.Double)">
            <summary>
            Smoothes a value between two values using a Hermite spline.
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="t">The interpolation factor. Value is clamped between 0 and 1.</param>
            <returns>The smoothed value.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Gamma(System.Double,System.Double,System.Double)">
            <summary>
            Applies gamma correction to a value.
            </summary>
            <param name="value">The value to modify.</param>
            <param name="absmax">The maximum absolute value of the input value.</param>
            <param name="gamma">The gamma correction value.</param>
            <returns>The gamma-corrected value.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.InverseLerp(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the linear parameter t that produces the interpolant value within the range [a, b].
            </summary>
            <param name="a">The start value.</param>
            <param name="b">The end value.</param>
            <param name="value">The value to interpolate within the range [a, b].</param>
            <returns>The linear parameter t in the range [0, 1] that produces the interpolant value.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.DeltaAngle(System.Double,System.Double)">
            <summary>
            Calculates the signed difference between two angles.
            </summary>
            <param name="current">The current angle in degrees.</param>
            <param name="target">The target angle in degrees.</param>
            <returns>The signed difference between the two angles in degrees.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Repeat(System.Double,System.Double)">
            <summary>
            Loops a value so that it is within a specified range.
            </summary>
            <param name="value">The value to loop.</param>
            <param name="length">Lenght of the loop</param>
            <returns>The looped value that wraps around if it goes outside the specified range.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.PercentageBetween(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the percentage of a specified value between two values.
            </summary>
            <param name="value">The value to interpolate between the range [min, max].</param>
            <param name="min">The minimum value in the range.</param>
            <param name="max">The maximum value in the range.</param>
            <returns>The percentage of value between min and max, ranging from 0 to 1.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.ClampAndWrap(System.Double,System.Double,System.Double)">
            <summary>
            Clamps a value between two other values and loops it if necessary.
            </summary>
            <param name="value">The value to clamp and loop.</param>
            <param name="min">The minimum value in the range.</param>
            <param name="max">The maximum value in the range.</param>
            <returns>The clamped and looped value that is within the specified range.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.Random(System.Int32)">
            <summary>
            Creates a random number generator with a given seed.
            </summary>
            <param name="seed">The seed value for the random number generator.</param>
            <returns>A new System.Random instance with the specified seed.</returns>
        </member>
        <member name="M:UnityEngine.Mathd.RandomValue(System.Random)">
            <summary>
            Generates a random double-precision floating-point number between 0 (inclusive) and 1 (exclusive).
            </summary>
            <param name="rand">The random number generator to use.</param>
            <returns>A random double-precision floating-point number between 0 (inclusive) and 1 (exclusive).</returns>
        </member>
        <member name="M:UnityEngine.Mathd.RandomRange(System.Random,System.Int32,System.Int32)">
            <summary>
            Generates a random integer between the specified minimum (inclusive) and maximum (exclusive) values.
            </summary>
            <param name="rand">The random number generator to use.</param>
            <param name="min">The minimum value (inclusive).</param>
            <param name="max">The maximum value (exclusive).</param>
            <returns>A random integer between the minimum (inclusive) and maximum (exclusive) values.</returns>
        </member>
        <member name="T:UnityEngine.Vector2d">
            <summary>
            A struct representing a 2D vector with double precision.
            </summary>
        </member>
        <member name="F:UnityEngine.Vector2d.kEpsilon">
            <summary>
            A small value to compare the magnitude of vectors to. Approximately 1e-5.
            </summary>
        </member>
        <member name="F:UnityEngine.Vector2d.x">
            <summary>
            The x component of the Vector2d.
            </summary>
        </member>
        <member name="F:UnityEngine.Vector2d.y">
            <summary>
            The y component of the Vector2d.
            </summary>
        </member>
        <member name="P:UnityEngine.Vector2d.Item(System.Int32)">
            <summary>
            Accesses the x or y component of the vector using an index.
            </summary>
            <param name="index">The index, where 0 corresponds to x, and 1 corresponds to y.</param>
            <returns>The value of the specified component.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is not 0 or 1.</exception>
        </member>
        <member name="P:UnityEngine.Vector2d.normalized">
            <summary>
            Returns a normalized version of this vector.
            </summary>
        </member>
        <member name="P:UnityEngine.Vector2d.magnitude">
            <summary>
            Returns the magnitude (length) of the vector.
            </summary>
        </member>
        <member name="P:UnityEngine.Vector2d.sqrMagnitude">
            <summary>
            Returns the squared magnitude of the vector.
            </summary>
        </member>
        <member name="P:UnityEngine.Vector2d.zero">
            <summary>
            The zero vector (0, 0).
            </summary>
        </member>
        <member name="P:UnityEngine.Vector2d.one">
            <summary>
            The one vector (1, 1).
            </summary>
        </member>
        <member name="P:UnityEngine.Vector2d.up">
            <summary>
            The up vector (0, 1).
            </summary>
        </member>
        <member name="P:UnityEngine.Vector2d.right">
            <summary>
            The right vector (1, 0).
            </summary>
        </member>
        <member name="M:UnityEngine.Vector2d.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new Vector2d with the specified x and y components.
            </summary>
            <param name="x">The x component of the vector.</param>
            <param name="y">The y component of the vector.</param>
        </member>
        <member name="M:UnityEngine.Vector2d.op_Implicit(UnityEngine.Vector3d)~UnityEngine.Vector2d">
            <summary>
            Implicitly converts a Vector3d to a Vector2d, ignoring the z component.
            </summary>
            <param name="v">The Vector3d to convert.</param>
        </member>
        <member name="M:UnityEngine.Vector2d.op_Implicit(UnityEngine.Vector2d)~UnityEngine.Vector3d">
            <summary>
            Implicitly converts a Vector2d to a Vector3d, setting the z component to 0.
            </summary>
            <param name="v">The Vector2d to convert.</param>
        </member>
        <member name="M:UnityEngine.Vector2d.op_Addition(UnityEngine.Vector2d,UnityEngine.Vector2d)">
            <summary>
            Adds two Vector2d vectors component-wise.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The result of adding the two vectors.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.op_Subtraction(UnityEngine.Vector2d,UnityEngine.Vector2d)">
            <summary>
            Subtracts the second Vector2d from the first vector component-wise.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The result of subtracting the second vector from the first vector.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.op_UnaryNegation(UnityEngine.Vector2d)">
            <summary>
            Negates a Vector2d, changing the sign of its components.
            </summary>
            <param name="a">The vector to negate.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.op_Multiply(UnityEngine.Vector2d,System.Double)">
            <summary>
            Multiplies a Vector2d by a scalar.
            </summary>
            <param name="a">The vector to multiply.</param>
            <param name="d">The scalar to multiply by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.op_Multiply(System.Double,UnityEngine.Vector2d)">
            <summary>
            Multiplies a Vector2d by a scalar.
            </summary>
            <param name="d">The scalar to multiply by.</param>
            <param name="a">The vector to multiply.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.op_Division(UnityEngine.Vector2d,System.Double)">
            <summary>
            Divides a Vector2d by a scalar.
            </summary>
            <param name="a">The vector to divide.</param>
            <param name="d">The scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.op_Equality(UnityEngine.Vector2d,UnityEngine.Vector2d)">
            <summary>
            Compares two Vector2d instances for equality within a small epsilon value.
            </summary>
            <param name="lhs">The first vector to compare.</param>
            <param name="rhs">The second vector to compare.</param>
            <returns>True if the vectors are approximately equal, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.op_Inequality(UnityEngine.Vector2d,UnityEngine.Vector2d)">
            <summary>
            Compares two Vector2d instances for inequality within a small epsilon value.
            </summary>
            <param name="lhs">The first vector to compare.</param>
            <param name="rhs">The second vector to compare.</param>
            <returns>True if the vectors are not approximately equal, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.Set(System.Double,System.Double)">
            <summary>
            Sets the x and y components of this vector.
            </summary>
            <param name="new_x">The new value for the x component.</param>
            <param name="new_y">The new value for the y component.</param>
        </member>
        <member name="M:UnityEngine.Vector2d.Lerp(UnityEngine.Vector2d,UnityEngine.Vector2d,System.Double)">
            <summary>
            Linearly interpolates between two Vector2d instances.
            </summary>
            <param name="from">The starting vector.</param>
            <param name="to">The ending vector.</param>
            <param name="t">The interpolation parameter. Should be in the range [0, 1].</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.MoveTowards(UnityEngine.Vector2d,UnityEngine.Vector2d,System.Double)">
            <summary>
            Moves a Vector2d from the current position towards a target position.
            </summary>
            <param name="current">The current position.</param>
            <param name="target">The target position.</param>
            <param name="maxDistanceDelta">The maximum distance to move towards the target.</param>
            <returns>The new position after moving.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.Scale(UnityEngine.Vector2d,UnityEngine.Vector2d)">
            <summary>
            Scales each component of one vector by the corresponding component of another vector.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector used for scaling.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.Scale(UnityEngine.Vector2d)">
            <summary>
            Scales this vector by another vector.
            </summary>
            <param name="scale">The vector used for scaling.</param>
        </member>
        <member name="M:UnityEngine.Vector2d.Normalize">
            <summary>
            Normalizes this vector if it has a magnitude greater than a small epsilon value.
            </summary>
        </member>
        <member name="M:UnityEngine.Vector2d.ToString">
            <summary>
            Returns a string representation of the Vector2d.
            </summary>
            <returns>A string representation of the vector.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.ToString(System.String)">
            <summary>
            Returns a string representation of the Vector2d with custom format.
            </summary>
            <param name="format">The format string to use for the components.</param>
            <returns>A formatted string representation of the vector.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.GetHashCode">
            <summary>
            Returns a hash code for the Vector2d.
            </summary>
            <returns>A hash code based on the vector's components.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.Equals(System.Object)">
            <summary>
            Compares this Vector2d to another object for equality.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>True if the other object is a Vector2d and has the same components, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.Dot(UnityEngine.Vector2d,UnityEngine.Vector2d)">
            <summary>
            Calculates the dot product of two Vector2d instances.
            </summary>
            <param name="lhs">The first vector.</param>
            <param name="rhs">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.Angle(UnityEngine.Vector2d,UnityEngine.Vector2d)">
            <summary>
            Calculates the angle in degrees between two Vector2d instances.
            </summary>
            <param name="from">The first vector.</param>
            <param name="to">The second vector.</param>
            <returns>The angle in degrees between the two vectors.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.Distance(UnityEngine.Vector2d,UnityEngine.Vector2d)">
            <summary>
            Calculates the distance between two Vector2d instances.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The Euclidean distance between the two vectors.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.ClampMagnitude(UnityEngine.Vector2d,System.Double)">
            <summary>
            Clamps the magnitude of the vector to a maximum length.
            </summary>
            <param name="vector">The vector to clamp.</param>
            <param name="maxLength">The maximum length to clamp to.</param>
            <returns>The vector clamped to the specified maximum length.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.SqrMagnitude(UnityEngine.Vector2d)">
            <summary>
            Returns the squared magnitude of a vector.
            </summary>
            <returns>The squared magnitude of a vector.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.SqrMagnitude">
            <summary>
            Returns the squared magnitude of this vector.
            </summary>
            <returns>The squared magnitude of the vector.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.Min(UnityEngine.Vector2d,UnityEngine.Vector2d)">
            <summary>
            Returns the minimum components of two Vector2d instances.
            </summary>
            <param name="lhs">The first vector.</param>
            <param name="rhs">The second vector.</param>
            <returns>A vector with the minimum components of the input vectors.</returns>
        </member>
        <member name="M:UnityEngine.Vector2d.Max(UnityEngine.Vector2d,UnityEngine.Vector2d)">
            <summary>
            Returns the maximum components of two Vector2d instances.
            </summary>
            <param name="lhs">The first vector.</param>
            <param name="rhs">The second vector.</param>
            <returns>A vector with the maximum components of the input vectors.</returns>
        </member>
        <member name="T:UnityEngine.Vector3d">
            <summary>
            Represents a 3D vector with double-precision floating-point components.
            </summary>
        </member>
        <member name="F:UnityEngine.Vector3d.kEpsilon">
            <summary>
            A small value used for approximate equality checks.
            </summary>
        </member>
        <member name="F:UnityEngine.Vector3d.x">
            <summary>
            The x component of the vector.
            </summary>
        </member>
        <member name="F:UnityEngine.Vector3d.y">
            <summary>
            The y component of the vector.
            </summary>
        </member>
        <member name="F:UnityEngine.Vector3d.z">
            <summary>
            The z component of the vector.
            </summary>
        </member>
        <member name="P:UnityEngine.Vector3d.Item(System.Int32)">
            <summary>
            Access the components of the vector using an index.
            </summary>
            <param name="index">The index (0 for x, 1 for y, 2 for z).</param>
            <returns>The value of the component at the specified index.</returns>
        </member>
        <member name="P:UnityEngine.Vector3d.normalized">
            <summary>
            Gets a normalized copy of the vector.
            </summary>
        </member>
        <member name="P:UnityEngine.Vector3d.magnitude">
            <summary>
            Gets the magnitude (length) of the vector.
            </summary>
        </member>
        <member name="P:UnityEngine.Vector3d.sqrMagnitude">
            <summary>
            Gets the squared magnitude of the vector.
            </summary>
        </member>
        <member name="P:UnityEngine.Vector3d.zero">
            <summary>
            Shorthand for writing Vector3d(0, 0, 0).
            </summary>
        </member>
        <member name="P:UnityEngine.Vector3d.one">
            <summary>
            Shorthand for writing Vector3d(1, 1, 1).
            </summary>
        </member>
        <member name="P:UnityEngine.Vector3d.right">
            <summary>
            Shorthand for writing Vector3d(1, 0, 0).
            </summary>
        </member>
        <member name="P:UnityEngine.Vector3d.left">
            <summary>
            Shorthand for writing Vector3d(-1, 0, 0).
            </summary>
        </member>
        <member name="P:UnityEngine.Vector3d.up">
            <summary>
            Shorthand for writing Vector3d(0, 1, 0).
            </summary>
        </member>
        <member name="P:UnityEngine.Vector3d.down">
            <summary>
            Shorthand for writing Vector3d(0, -1, 0).
            </summary>
        </member>
        <member name="P:UnityEngine.Vector3d.forward">
            <summary>
            Shorthand for writing Vector3d(0, 0, 1).
            </summary>
        </member>
        <member name="P:UnityEngine.Vector3d.back">
            <summary>
            Shorthand for writing Vector3d(0, 0, -1).
            </summary>
        </member>
        <member name="P:UnityEngine.Vector3d.fwd">
            <summary>
            Shorthand for writing Vector3d(0, 0, 1).
            </summary>
        </member>
        <member name="M:UnityEngine.Vector3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Vector3d struct with the given components.
            </summary>
            <param name="x">The x-component of the vector.</param>
            <param name="y">The y-component of the vector.</param>
            <param name="z">The z-component of the vector.</param>
        </member>
        <member name="M:UnityEngine.Vector3d.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Vector3d struct with the components converted from floats.
            </summary>
            <param name="x">The x-component of the vector as a float.</param>
            <param name="y">The y-component of the vector as a float.</param>
            <param name="z">The z-component of the vector as a float.</param>
        </member>
        <member name="M:UnityEngine.Vector3d.#ctor(UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the Vector3d struct by converting a Vector3.
            </summary>
            <param name="v3">A Vector3 to convert into a Vector3d.</param>
        </member>
        <member name="M:UnityEngine.Vector3d.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Vector3d struct with the given x and y components.
            The z component is set to 0.
            </summary>
            <param name="x">The x-component of the vector.</param>
            <param name="y">The y-component of the vector.</param>
        </member>
        <member name="M:UnityEngine.Vector3d.op_Addition(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Adds two Vector3d instances and returns the result.
            </summary>
            <param name="a">The first vector to add.</param>
            <param name="b">The second vector to add.</param>
            <returns>The result of adding the two vectors.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.op_Subtraction(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Subtracts one Vector3d instance from another and returns the result.
            </summary>
            <param name="a">The vector to subtract from.</param>
            <param name="b">The vector to subtract.</param>
            <returns>The result of subtracting the second vector from the first.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.op_UnaryNegation(UnityEngine.Vector3d)">
            <summary>
            Negates a Vector3d instance (reverses its direction).
            </summary>
            <param name="a">The vector to negate.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.op_Multiply(UnityEngine.Vector3d,System.Double)">
            <summary>
            Multiplies a Vector3d by a scalar (double) value.
            </summary>
            <param name="a">The vector to multiply.</param>
            <param name="d">The scalar value to multiply by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.op_Multiply(System.Double,UnityEngine.Vector3d)">
            <summary>
            Multiplies a scalar (double) value by a Vector3d.
            </summary>
            <param name="d">The scalar value to multiply.</param>
            <param name="a">The vector to multiply.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.op_Division(UnityEngine.Vector3d,System.Double)">
            <summary>
            Divides a Vector3d by a scalar (double) value.
            </summary>
            <param name="a">The vector to divide.</param>
            <param name="d">The scalar value to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.op_Equality(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Checks if two Vector3d instances are approximately equal within a small epsilon value.
            </summary>
            <param name="lhs">The first vector to compare.</param>
            <param name="rhs">The second vector to compare.</param>
            <returns>True if the two vectors are approximately equal, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.op_Inequality(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Checks if two Vector3d instances are not approximately equal within a small epsilon value.
            </summary>
            <param name="lhs">The first vector to compare.</param>
            <param name="rhs">The second vector to compare.</param>
            <returns>True if the two vectors are not approximately equal, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.op_Explicit(UnityEngine.Vector3d)~UnityEngine.Vector3">
            <summary>
            Converts a Vector3d to a Vector3 by casting its components to float.
            </summary>
            <param name="vector3d">The Vector3d to convert.</param>
            <returns>A new Vector3 with float components.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Lerp(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Double)">
            <summary>
            Linearly interpolates between two Vector3d instances.
            </summary>
            <param name="from">The start vector.</param>
            <param name="to">The end vector.</param>
            <param name="t">The interpolation parameter (0 to 1).</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Slerp(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Double)">
            <summary>
            Spherically interpolates between two Vector3d instances.
            </summary>
            <param name="from">The start vector.</param>
            <param name="to">The end vector.</param>
            <param name="t">The interpolation parameter (0 to 1).</param>
            <returns>The spherically interpolated vector.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.OrthoNormalize(UnityEngine.Vector3d@,UnityEngine.Vector3d@)">
            <summary>
            Ortho-normalizes two vectors.
            </summary>
            <param name="normal">The first vector to ortho-normalize.</param>
            <param name="tangent">The second vector to ortho-normalize.</param>
        </member>
        <member name="M:UnityEngine.Vector3d.OrthoNormalize(UnityEngine.Vector3d@,UnityEngine.Vector3d@,UnityEngine.Vector3d@)">
            <summary>
            Ortho-normalizes three vectors.
            </summary>
            <param name="normal">The first vector to ortho-normalize.</param>
            <param name="tangent">The second vector to ortho-normalize.</param>
            <param name="binormal">The third vector to ortho-normalize.</param>
        </member>
        <member name="M:UnityEngine.Vector3d.MoveTowards(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Double)">
            <summary>
            Moves a vector towards a target vector by a specified maximum distance.
            </summary>
            <param name="current">The current vector.</param>
            <param name="target">The target vector.</param>
            <param name="maxDistanceDelta">The maximum distance to move towards the target.</param>
            <returns>The resulting vector after moving towards the target.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.RotateTowards(UnityEngine.Vector3d,UnityEngine.Vector3d,System.Double,System.Double)">
            <summary>
            Rotates a vector towards a target vector by a specified maximum angle and magnitude change.
            </summary>
            <param name="current">The current vector.</param>
            <param name="target">The target vector.</param>
            <param name="maxRadiansDelta">The maximum angle (in radians) to rotate.</param>
            <param name="maxMagnitudeDelta">The maximum change in magnitude.</param>
            <returns>The resulting vector after rotation towards the target.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.SmoothDamp(UnityEngine.Vector3d,UnityEngine.Vector3d,UnityEngine.Vector3d@,System.Double,System.Double)">
            <summary>
            Applies smooth damping to move from the current vector towards the target vector.
            </summary>
            <param name="current">The current vector.</param>
            <param name="target">The target vector.</param>
            <param name="currentVelocity">The current velocity of the vector.</param>
            <param name="smoothTime">The time to reach the target.</param>
            <param name="maxSpeed">The maximum speed of the vector.</param>
            <returns>The resulting vector after applying smooth damping.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.SmoothDamp(UnityEngine.Vector3d,UnityEngine.Vector3d,UnityEngine.Vector3d@,System.Double)">
            <summary>
            Applies smooth damping to move from the current vector towards the target vector.
            </summary>
            <param name="current">The current vector.</param>
            <param name="target">The target vector.</param>
            <param name="currentVelocity">The current velocity of the vector.</param>
            <param name="smoothTime">The time to reach the target.</param>
            <returns>The resulting vector after applying smooth damping.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.SmoothDamp(UnityEngine.Vector3d,UnityEngine.Vector3d,UnityEngine.Vector3d@,System.Double,System.Double,System.Double)">
            <summary>
            Applies smooth damping to move from the current vector towards the target vector.
            </summary>
            <param name="current">The current vector.</param>
            <param name="target">The target vector.</param>
            <param name="currentVelocity">The current velocity of the vector.</param>
            <param name="smoothTime">The time to reach the target.</param>
            <param name="maxSpeed">The maximum speed of the vector.</param>
            <param name="deltaTime">The time interval between function calls.</param>
            <returns>The resulting vector after applying smooth damping.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Set(System.Double,System.Double,System.Double)">
            <summary>
            Sets the components of the vector to new values.
            </summary>
            <param name="new_x">The new x-component.</param>
            <param name="new_y">The new y-component.</param>
            <param name="new_z">The new z-component.</param>
        </member>
        <member name="M:UnityEngine.Vector3d.Scale(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Multiplies each component of this vector by the corresponding component of another vector.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>A new vector containing the component-wise product of the input vectors.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Scale(UnityEngine.Vector3d)">
            <summary>
            Scales this vector by multiplying each component with the corresponding component of another vector.
            </summary>
            <param name="scale">The vector by which to scale this vector.</param>
        </member>
        <member name="M:UnityEngine.Vector3d.Set(System.Double,System.Double)">
            <summary>
            Sets the components of the vector to new values.
            </summary>
            <param name="new_x">The new x-component.</param>
            <param name="new_y">The new y-component.</param>
        </member>
        <member name="M:UnityEngine.Vector3d.GetHashCode">
            <summary>
            Gets the hash code of the vector.
            </summary>
            <returns>The hash code of the vector.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Equals(System.Object)">
            <summary>
            Compares this vector to another object for equality.
            </summary>
            <param name="other">The object to compare to this vector.</param>
            <returns>True if the other object is a Vector3d and has the same components as this vector, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Reflect(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Reflects the input direction off the plane defined by the normal.
            </summary>
            <param name="inDirection">The direction to reflect.</param>
            <param name="inNormal">The normal to reflect off of.</param>
            <returns>The reflected direction.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Equals(UnityEngine.Vector3d)">
            <summary>
            Compares this vector to another Vector3d for equality.
            </summary>
            <param name="other">The vector to compare to this vector.</param>
            <returns>True if the other vector has the same components as this vector, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.ToString">
            <summary>
            Returns a string representation of the vector.
            </summary>
            <returns>A string representation of the vector in the format "(x, y, z)".</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Dot(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Calculates the dot product of two Vector3d instances.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Cross(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Calculates the cross product of two Vector3d instances.
            </summary>
            <param name="lhs">The first vector.</param>
            <param name="rhs">The second vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Normalize(UnityEngine.Vector3d)">
            <summary>
            Normalizes a vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Normalize">
            <summary>
            Returns the normalized vector of this instance.
            </summary>
        </member>
        <member name="M:UnityEngine.Vector3d.Project(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Projects a vector onto another vector.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="onNormal">The vector onto which to project.</param>
            <returns>The projection of the vector onto the other vector.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Exclude(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Removes a vector's projection onto another vector.
            </summary>
            <param name="excludeThis">The vector to exclude from.</param>
            <param name="fromThat">The vector to remove the projection from.</param>
            <returns>The vector with the projection removed.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Angle(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Calculates the angle between two vectors in degrees.
            </summary>
            <param name="from">The first vector.</param>
            <param name="to">The second vector.</param>
            <returns>The angle between the two vectors in degrees.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Distance(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Calculates the Euclidean distance between two 3D vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.ClampMagnitude(UnityEngine.Vector3d,System.Double)">
            <summary>
            Clamps the magnitude of a vector to a specified maximum length.
            </summary>
            <param name="vector">The vector to clamp.</param>
            <param name="maxLength">The maximum length to which the vector will be clamped.</param>
            <returns>
            If the magnitude of the input vector is greater than <paramref name="maxLength" />, it returns a vector with the same direction as the original but with a magnitude of <paramref name="maxLength" />.
            If the magnitude of the input vector is less than or equal to <paramref name="maxLength" />, it returns the original vector.
            </returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Magnitude(UnityEngine.Vector3d)">
            <summary>
            Calculates the magnitude (length) of a 3D vector.
            </summary>
            <param name="a">The input vector.</param>
            <returns>The magnitude of the vector.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.SqrMagnitude(UnityEngine.Vector3d)">
            <summary>
            Calculates the square of the magnitude (length) of a 3D vector.
            </summary>
            <param name="a">The input vector.</param>
            <returns>The square of the magnitude of the vector.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Min(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Returns a new vector where each component is the minimum value between the components of two input vectors.
            </summary>
            <param name="lhs">The first vector.</param>
            <param name="rhs">The second vector.</param>
            <returns>The vector with components equal to the minimum values of the input vectors.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.Max(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            Returns a new vector where each component is the maximum value between the components of two input vectors.
            </summary>
            <param name="lhs">The first vector.</param>
            <param name="rhs">The second vector.</param>
            <returns>The vector with components equal to the maximum values of the input vectors.</returns>
        </member>
        <member name="M:UnityEngine.Vector3d.AngleBetween(UnityEngine.Vector3d,UnityEngine.Vector3d)">
            <summary>
            [Obsolete] Calculates the angle in degrees between two vectors. Use <see cref="M:UnityEngine.Vector3d.Angle(UnityEngine.Vector3d,UnityEngine.Vector3d)" /> instead.
            </summary>
            <param name="from">The first vector.</param>
            <param name="to">The second vector.</param>
            <returns>The angle in degrees between the two vectors.</returns>
        </member>
        <member name="T:UnityEngine.VectorConversionExtensions">
            <summary>
            Provides extension methods for converting between Unity's Vector types and their double-precision equivalents.
            </summary>
        </member>
        <member name="M:UnityEngine.VectorConversionExtensions.ToVector2d(UnityEngine.Vector2)">
            <summary>
            Converts a Unity <see cref="T:UnityEngine.Vector2" /> to a double-precision <see cref="T:UnityEngine.Vector2d" />.
            </summary>
            <param name="vec">The <see cref="T:UnityEngine.Vector2" /> to convert.</param>
            <returns>A double-precision <see cref="T:UnityEngine.Vector2d" />.</returns>
        </member>
        <member name="M:UnityEngine.VectorConversionExtensions.ToVector3d(UnityEngine.Vector3)">
            <summary>
            Converts a Unity <see cref="T:UnityEngine.Vector3" /> to a double-precision <see cref="T:UnityEngine.Vector3d" />.
            </summary>
            <param name="vec">The <see cref="T:UnityEngine.Vector3" /> to convert.</param>
            <returns>A double-precision <see cref="T:UnityEngine.Vector3d" />.</returns>
        </member>
        <member name="M:UnityEngine.VectorConversionExtensions.ToVector3d(UnityEngine.Vector4)">
            <summary>
            Converts a Unity <see cref="T:UnityEngine.Vector4" /> to a double-precision <see cref="T:UnityEngine.Vector3d" />.
            </summary>
            <param name="vec">The <see cref="T:UnityEngine.Vector4" /> to convert.</param>
            <returns>A double-precision <see cref="T:UnityEngine.Vector3d" />.</returns>
        </member>
        <member name="M:UnityEngine.VectorConversionExtensions.ToVector2(UnityEngine.Vector2d)">
            <summary>
            Converts a double-precision <see cref="T:UnityEngine.Vector2d" /> to a Unity <see cref="T:UnityEngine.Vector2" />.
            </summary>
            <param name="vec">The double-precision <see cref="T:UnityEngine.Vector2d" /> to convert.</param>
            <returns>A Unity <see cref="T:UnityEngine.Vector2" />.</returns>
        </member>
        <member name="M:UnityEngine.VectorConversionExtensions.ToVector3(UnityEngine.Vector3d)">
            <summary>
            Converts a double-precision <see cref="T:UnityEngine.Vector3d" /> to a Unity <see cref="T:UnityEngine.Vector3" />.
            </summary>
            <param name="vec">The double-precision <see cref="T:UnityEngine.Vector3d" /> to convert.</param>
            <returns>A Unity <see cref="T:UnityEngine.Vector3" />.</returns>
        </member>
        <member name="T:TextureDraw">
            <summary>
            
            </summary>
        </member>
        <member name="M:TextureDraw.SetTarget(UnityEngine.Texture2D)">
            <summary>
            
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:TextureDraw.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:TextureDraw.DrawCross(UnityEngine.Vector2,System.Int32,UnityEngine.Color32)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <param name="length"></param>
            <param name="color"></param>
        </member>
        <member name="M:TextureDraw.DrawCross(UnityEngine.Vector2Int,System.Int32,UnityEngine.Color32)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <param name="length"></param>
            <param name="color"></param>
        </member>
        <member name="M:TextureDraw.DrawFilledRect(UnityEngine.Vector2Int,System.Int32,UnityEngine.Color32)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <param name="size"></param>
            <param name="color"></param>
        </member>
        <member name="M:TextureDraw.DrawRect(UnityEngine.Vector2,System.Single,UnityEngine.Color32)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="size"></param>
            <param name="color"></param>
        </member>
        <member name="M:TextureDraw.SetPixel(UnityEngine.Vector2,UnityEngine.Color32)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <param name="c"></param>
        </member>
        <member name="M:TextureDraw.AddPixel(UnityEngine.Vector2,UnityEngine.Color,System.Single)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <param name="c"></param>
            <param name="lerp"></param>
        </member>
        <member name="M:TextureDraw.DrawHorizontalLine(UnityEngine.Vector2,System.Int32,UnityEngine.Color32)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <param name="length"></param>
            <param name="c"></param>
        </member>
        <member name="M:TextureDraw.DrawVerticalLine(UnityEngine.Vector2Int,System.Int32,UnityEngine.Color32)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <param name="length"></param>
            <param name="c"></param>
        </member>
        <member name="M:TextureDraw.DrawLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Color32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="color"></param>
        </member>
        <member name="T:BigIntegerLibrary.BigIntegerException">
            <summary>
            BigInteger-related exception class.
            </summary>
        </member>
        <member name="M:BigIntegerLibrary.BigIntegerException.#ctor(System.String,System.Exception)">
            <summary>
            BigIntegerException constructor.
            </summary>
            <param name="message">The exception message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:CreateQRCode">
            <summary>
            Unity sample class to create a QRCode
            </summary>
        </member>
        <member name="T:ScanQRCode">
            <summary>
            Sample Unity class to scan a QRCode
            </summary>
        </member>
        <member name="M:ScanQRCode.Decode(UnityEngine.Color32[],System.Int32,System.Int32)">
            <summary>
            Decodes a code from image
            </summary>
            <param name="colors">image pixels</param>
            <param name="width">image width in pixels</param>
            <param name="height">image height in pixels</param>
            <returns></returns>
        </member>
        <member name="M:Auki.ConjureKit.Manna.BitwiseNativeArrayView.System#Collections#Generic#IEnumerable{System#Boolean}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Auki.ConjureKit.Manna.BitwiseNativeArrayView.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:Auki.ConjureKit.Manna.BitwiseNativeArrayView.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
    </members>
</doc>
